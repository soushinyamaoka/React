 {
     "contentsId": "java2",
     "title": "Javaのコンストラクタ問題集ページ",
     "subtitle": "初級",
     "questions": [{
             "id": 1,
             "questionId": "java2_1",
             "title": "デフォルトコンストラクタ",
             "question": "次の条件に従って、デフォルトコンストラクタを持つクラス「Person」を作成してください。\n\n1. クラス名は「Person」\n2. デフォルトコンストラクタを持つ\n3. デフォルトコンストラクタ内で「Created a person.」と出力する\n\nメインメソッドでPersonクラスのインスタンスを作成して、デフォルトコンストラクタが呼ばれることを確認してください。",
             "explanation": "デフォルトコンストラクタは引数を持たず、クラスに明示的にコンストラクタが定義されていない場合に自動的に作成されるコンストラクタです。",
             "answer": "public class Person {\n\n    public Person() {\n        System.out.println(\"Created a person.\");\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person(); // 予想される出力結果: Created a person.\n    }\n\n}"
         },
         {
             "id": 2,
             "questionId": "java2_2",
             "title": "コンストラクタの引数",
             "question": "次の条件に従って、「Person」クラスを拡張し、コンストラクタに引数を追加してください。\n\n1. クラス名は「Person」\n2. 引数を持つコンストラクタを作成\n3. 引数は「String name」\n4. コンストラクタ内で、「Person created: \" + name」と出力する\n\nメインメソッドでPersonクラスのインスタンスを作成し、引数を持つコンストラクタが呼ばれることを確認してください。",
             "explanation": "引数を持つコンストラクタを作成することで、オブジェクトが作成される際に初期化のための情報を与えることができます。",
             "answer": "public class Person {\n\n    public Person(String name) {\n        System.out.println(\"Person created: \" + name);\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person(\"John\"); // 予想される出力結果: Person created: John\n    }\n\n}"
         },
         {
             "id": 3,
             "questionId": "java2_3",
             "title": "デフォルトコンストラクタ",
             "question": "次の条件に従って、「Person」クラスにデフォルトコンストラクタを追加してください。\n\n1. クラス名は「Person」\n2. デフォルトコンストラクタを作成\n3. コンストラクタ内で、「Default Person created」と出力する\n\nメインメソッドでPersonクラスのインスタンスを作成し、デフォルトコンストラクタが呼ばれることを確認してください。",
             "explanation": "デフォルトコンストラクタは、引数を持たないコンストラクタです。クラス内にコンストラクタが定義されていない場合、デフォルトコンストラクタが自動的に挿入されますが、明示的に定義することもできます。",
             "answer": "public class Person {\n\n    public Person() {\n        System.out.println(\"Default Person created\");\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person(); // 予想される出力結果: Default Person created\n    }\n\n}"
         },
         {
             "id": 4,
             "questionId": "java2_4",
             "title": "引数付きコンストラクタ",
             "question": "次の条件に従って、「Car」クラスに引数付きコンストラクタを追加してください。\n\n1. クラス名は「Car」\n2. 引数付きコンストラクタを作成（int型の「speed」を引数として受け取る）\n3. 「speed」をインスタンス変数「currentSpeed」に設定する\n4. インスタンス変数「currentSpeed」を取得するメソッド「getCurrentSpeed」を作成\n\nメインメソッドでCarクラスのインスタンスを作成し、引数付きコンストラクタで設定した速度が正しく設定されていることを確認してください。",
             "explanation": "引数付きコンストラクタは、オブジェクトの初期化に使用される引数を持つコンストラクタです。このコンストラクタを使用すると、オブジェクトを作成するときにインスタンス変数に値を設定できます。",
             "answer": "public class Car {\n\n    private int currentSpeed;\n\n    public Car(int speed) {\n        this.currentSpeed = speed;\n    }\n\n    public int getCurrentSpeed() {\n        return currentSpeed;\n    }\n\n    public static void main(String[] args) {\n        Car car = new Car(60);\n        System.out.println(car.getCurrentSpeed()); // 予想される出力結果: 60\n    }\n\n}"
         },
         {
             "id": 5,
             "questionId": "java2_5",
             "title": "複数のコンストラクタ",
             "question": "次の条件に従って、「Car」クラスに複数のコンストラクタを追加してください。\n\n1. クラス名は「Car」\n2. デフォルトコンストラクタ（引数なし）を作成\n3. 引数付きコンストラクタ（int型の「speed」を引数として受け取る）を作成\n4. デフォルトコンストラクタでは「currentSpeed」を0に設定する\n5. 引数付きコンストラクタでは、「speed」をインスタンス変数「currentSpeed」に設定する\n6. インスタンス変数「currentSpeed」を取得するメソッド「getCurrentSpeed」を作成\n\nメインメソッドでCarクラスのインスタンスを作成し、デフォルトコンストラクタと引数付きコンストラクタの両方で速度が正しく設定されていることを確認してください。",
             "explanation": "複数のコンストラクタを持つことで、オブジェクトの初期化に柔軟性を持たせることができます。デフォルトコンストラクタと引数付きコンストラクタを使ってオブジェクトを作成し、インスタンス変数に値を設定できます。",
             "answer": "public class Car {\n\n    private int currentSpeed;\n\n    public Car() {\n        this.currentSpeed = 0;\n    }\n\n    public Car(int speed) {\n        this.currentSpeed = speed;\n    }\n\n    public int getCurrentSpeed() {\n        return currentSpeed;\n    }\n\n    public static void main(String[] args) {\n        Car car1 = new Car();\n        Car car2 = new Car(60);\n\n        System.out.println(car1.getCurrentSpeed()); // 予想される出力結果: 0\n        System.out.println(car2.getCurrentSpeed()); // 予想される出力結果: 60\n    }\n\n}"
         },
         {
             "id": 6,
             "questionId": "java2_6",
             "title": "コンストラクタのチェーン",
             "question": "次の条件に従って、「Employee」クラスに複数のコンストラクタを追加してください。\n\n1. クラス名は「Employee」\n2. String型の「name」とint型の「age」の2つのインスタンス変数を持つ\n3. デフォルトコンストラクタ（引数なし）を作成し、「name」に\"John Doe\"、ageに25を設定する\n4. 引数付きコンストラクタ（String型の「name」を引数として受け取る）を作成し、「name」のみ設定する\n5. 引数付きコンストラクタ（String型の「name」とint型の「age」を引数として受け取る）を作成し、「name」と「age」の両方を設定する\n6. 他のコンストラクタを呼び出すために「this()」を使用する\n\nメインメソッドでEmployeeクラスのインスタンスを作成し、複数のコンストラクタが正しく機能していることを確認してください。",
             "explanation": "コンストラクタチェーンを使用することで、複数のコンストラクタ間でコードの重複を削減し、可読性と保守性を向上させることができます。この問題では、「this()」を使用して他のコンストラクタを呼び出すことが重要です。",
             "answer": "public class Employee {\n\n    private String name;\n    private int age;\n\n    public Employee() {\n        this(\"John Doe\", 25);\n    }\n\n    public Employee(String name) {\n        this(name, 25);\n    }\n\n    public Employee(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) {\n        Employee employee1 = new Employee();\n        Employee employee2 = new Employee(\"Jane Doe\");\n        Employee employee3 = new Employee(\"Alice\", 30);\n\n        System.out.println(employee1.name + \", \" + employee1.age); // 予想される出力結果: John Doe, 25\n        System.out.println(employee2.name + \", \" + employee2.age); // 予想される出力結果: Jane Doe, 25\n        System.out.println(employee3.name + \", \" + employee3.age); // 予想される出力結果: Alice, 30\n    }\n\n}"
         },
         {
             "id": 7,
             "questionId": "java2_7",
             "title": "コンストラクタのオーバーロード",
             "question": "以下の条件に従って、「Car」クラスに複数のコンストラクタを追加してください。\n\n1. クラス名は「Car」\n2. String型の「make」、String型の「model」、int型の「year」の3つのインスタンス変数を持つ\n3. デフォルトコンストラクタ（引数なし）を作成し、デフォルト値（\"Unknown\"、\"Unknown\"、0）を設定する\n4. 1つの引数付きコンストラクタ（String型の「make」を引数として受け取る）を作成し、デフォルト値と合わせて設定する\n5. 2つの引数付きコンストラクタ（String型の「make」とString型の「model」を引数として受け取る）を作成し、デフォルト値と合わせて設定する\n6. 3つの引数付きコンストラクタ（String型の「make」、String型の「model」、int型の「year」を引数として受け取る）を作成し、すべての値を設定する\n\nメインメソッドでCarクラスのインスタンスを作成し、複数のコンストラクタが正しく機能していることを確認してください。",
             "explanation": "コンストラクタのオーバーロードは、同じクラス名を持つ複数のコンストラクタを作成することで、異なる引数やデフォルト値を使用してインスタンスを初期化できるようにします。これにより、柔軟な初期化が可能になります。",
             "answer": "public class Car {\n\n    private String make;\n    private String model;\n    private int year;\n\n    public Car() {\n        this(\"Unknown\", \"Unknown\", 0);\n    }\n\n    public Car(String make) {\n        this(make, \"Unknown\", 0);\n    }\n\n    public Car(String make, String model) {\n        this(make, model, 0);\n    }\n\n    public Car(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    public static void main(String[] args) {\n        Car car1 = new Car();\n        Car car2 = new Car(\"Toyota\");\n        Car car3 = new Car(\"Honda\", \"Civic\");\n        Car car4 = new Car(\"Ford\", \"Mustang\", 2023);\n    }\n}"
         },
         {
             "id": 8,
             "questionId": "java_constructor_8",
             "title": "コンストラクタの呼び出し",
             "question": "以下のDogクラスには、名前と年齢の2つの属性があります。コンストラクタを作成して、オブジェクトが作成される際に、名前と年齢を引数として受け取り、その属性を設定するようにしてください。\n\nまた、mainメソッドでDogクラスのオブジェクトを作成し、その名前と年齢を出力してください。\n\n```java\npublic class Dog {\n\n    private String name;\n    private int age;\n\n}\n```",
             "explanation": "コンストラクタは、オブジェクトが作成される際に、初期化のために自動的に呼び出されます。コンストラクタは、クラス名と同じ名前を持ち、戻り値の型を持ちません。",
             "answer": "public class Dog {\n\n    private String name;\n    private int age;\n\n    public Dog(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) {\n        Dog myDog = new Dog(\"Buddy\", 3);\n\n        System.out.println(\"Dog's name: \" + myDog.name);\n        System.out.println(\"Dog's age: \" + myDog.age);\n    }\n}"
         },
         {
             "id": 9,
             "questionId": "java_constructor_9",
             "title": "コンストラクタのオーバーロード",
             "question": "以下のBookクラスには、タイトル、著者名、ページ数の3つの属性があります。3つの異なるコンストラクタをオーバーロードして、以下の3つのシチュエーションに対応してください。\n\n1. タイトル、著者名、ページ数のすべてが引数として与えられる。\n2. タイトルと著者名のみが引数として与えられる。\n3. タイトルのみが引数として与えられる。\n\nmainメソッドで、それぞれのコンストラクタを使ってBookクラスのオブジェクトを作成してください。\n\n```java\npublic class Book {\n\n    private String title;\n    private String author;\n    private int pageCount;\n\n}\n```",
             "explanation": "コンストラクタのオーバーロードでは、異なる引数の数や型を持つ複数のコンストラクタを同じクラス内に定義します。オーバーロードされたコンストラクタは、引数の数や型に応じて適切なものが選択され実行されます。",
             "answer": "public class Book {\n\n    private String title;\n    private String author;\n    private int pageCount;\n\n    public Book(String title, String author, int pageCount) {\n        this.title = title;\n        this.author = author;\n        this.pageCount = pageCount;\n    }\n\n    public Book(String title, String author) {\n        this.title = title;\n        this.author = author;\n        this.pageCount = 0;\n    }\n\n    public Book(String title) {\n        this.title = title;\n        this.author = \"\";\n        this.pageCount = 0;\n    }\n\n    public static void main(String[] args) {\n        Book book1 = new Book(\"The Catcher in the Rye\", \"J.D. Salinger\", 277);\n        Book book2 = new Book(\"To Kill a Mockingbird\", \"Harper Lee\");\n        Book book3 = new Book(\"The Great Gatsby\");\n\n        System.out.println(book1.title + \", \" + book1.author + \", \" + book1.pageCount);\n        System.out.println(book2.title + \", \" + book2.author + \", \" + book2.pageCount);\n        System.out.println(book3.title + \", \" + book3.author + \", \" + book3.pageCount);\n    }\n}"
         },
         {
             "id": 10,
             "questionId": "java_constructor_10",
             "title": "デフォルトコンストラクタの追加",
             "question": "以下のEmployeeクラスに、デフォルトコンストラクタを追加してください。デフォルトコンストラクタは、nameには\"John Doe\"、ageには30、departmentには\"HR\"を設定します。\n\n```java\npublic class Employee {\n\n    private String name;\n    private int age;\n    private String department;\n\n}\n```\n\nmainメソッドで、デフォルトコンストラクタを使ってEmployeeクラスのオブジェクトを作成し、オブジェクトの属性を出力してください。",
             "explanation": "デフォルトコンストラクタは、引数を持たないコンストラクタです。オブジェクトの初期化時に、デフォルトの値を設定することができます。この問題では、デフォルトコンストラクタを使って、name、age、departmentの属性にデフォルト値を設定しています。",
             "answer": "public class Employee {\n\n    private String name;\n    private int age;\n    private String department;\n\n    public Employee() {\n        this.name = \"John Doe\";\n        this.age = 30;\n        this.department = \"HR\";\n    }\n\n    public static void main(String[] args) {\n        Employee employee = new Employee();\n\n        System.out.println(\"Name: \" + employee.name);\n        System.out.println(\"Age: \" + employee.age);\n        System.out.println(\"Department: \" + employee.department);\n    }\n}"
         },
         {
             "id": 11,
             "questionId": "java_constructor_11",
             "title": "コンストラクタオーバーロード",
             "question": "以下のクラスRectangleに、コンストラクタを2つ追加してください。1つ目のコンストラクタは、引数なし（デフォルトコンストラクタ）で、lengthとwidthに1を設定します。2つ目のコンストラクタは、引数としてlengthとwidthを受け取り、それらの値を設定します。\n\n```java\npublic class Rectangle {\n\n    private int length;\n    private int width;\n\n}\n```\n\nmainメソッドで、これら2つのコンストラクタを使ってRectangleオブジェクトを作成し、それぞれのlengthとwidthを出力してください。",
             "explanation": "コンストラクタオーバーロードは、同じ名前のコンストラクタを複数定義することです。ただし、各コンストラクタのパラメータの数や型は異なる必要があります。この問題では、デフォルトコンストラクタと引数を2つ取るコンストラクタを作成しています。",
             "answer": "public class Rectangle {\n\n    private int length;\n    private int width;\n\n    public Rectangle() {\n        this.length = 1;\n        this.width = 1;\n    }\n\n    public Rectangle(int length, int width) {\n        this.length = length;\n        this.width = width;\n    }\n\n    public static void main(String[] args) {\n        Rectangle rect1 = new Rectangle();\n        Rectangle rect2 = new Rectangle(5, 10);\n\n        System.out.println(\"Rectangle1: length = \" + rect1.length + \", width = \" + rect1.width);\n        System.out.println(\"Rectangle2: length = \" + rect2.length + \", width = \" + rect2.width);\n    }\n}"
         },
         {
             "id": 12,
             "questionId": "java_constructor_12",
             "title": "コンストラクタと初期化",
             "question": "以下のクラスCircleに、コンストラクタを追加してください。コンストラクタは、引数としてradiusを受け取り、それを設定します。さらに、Circleオブジェクトの作成時に、その面積を計算し、出力してください。\n\n```java\npublic class Circle {\n\n    private double radius;\n\n}\n```\n\n面積を計算するためには、半径の二乗にπを掛けます（Math.PIを使用します）。",
             "explanation": "コンストラクタはオブジェクトの初期化に使用されます。この問題では、引数を1つ取るコンストラクタを作成し、その引数をフィールドのradiusに設定します。また、コンストラクタ内で面積を計算し、出力します。",
             "answer": "public class Circle {\n\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n        double area = Math.PI * radius * radius;\n        System.out.println(\"Circle area: \" + area);\n    }\n\n    public static void main(String[] args) {\n        Circle circle = new Circle(5);\n    }\n}"
         },
         {
             "id": 13,
             "questionId": "java_constructor_13",
             "title": "複数のコンストラクタ",
             "question": "以下のPersonクラスに、以下の2つのコンストラクタを追加してください。\n\n1. 引数がないコンストラクタ（デフォルトコンストラクタ）。このコンストラクタは、nameを\"Unknown\"、ageを0に設定します。\n2. 引数としてnameとageを受け取るコンストラクタ。このコンストラクタは、引数の値をフィールドに設定します。\n\n```java\npublic class Person {\n\n    private String name;\n    private int age;\n\n}\n```\n\nまた、mainメソッドを追加し、それぞれのコンストラクタを使用してPersonオブジェクトを作成し、それらのnameとageを出力してください。",
             "explanation": "Javaでは、複数のコンストラクタを持つことができます（これをコンストラクタオーバーロードといいます）。この問題では、引数がないデフォルトコンストラクタと、引数を2つ取るコンストラクタを作成します。",
             "answer": "public class Person {\n\n    private String name;\n    private int age;\n\n    public Person() {\n        this.name = \"Unknown\";\n        this.age = 0;\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) {\n        Person person1 = new Person();\n        System.out.println(\"Name: \" + person1.name + \", Age: \" + person1.age);\n        Person person2 = new Person(\"John\", 25);\n        System.out.println(\"Name: \" + person2.name + \", Age: \" + person2.age);\n    }\n}"
         },
         {
             "id": 14,
             "questionId": "java_constructor_14",
             "title": "コンストラクタと初期化ブロック",
             "question": "以下のPersonクラスについて、次のステップに従ってコードを完成させてください。\n\n1. nameフィールドに対して、初期化ブロックを使って\"Unknown\"を割り当てます。\n2. ageフィールドに対して、初期化ブロックを使って0を割り当てます。\n3. 引数なしのデフォルトコンストラクタを追加します。\n4. 引数としてnameとageを受け取るコンストラクタを追加します。このコンストラクタは、引数の値をフィールドに設定します。\n\n```java\npublic class Person {\n\n    private String name;\n    private int age;\n\n}\n```\n\nまた、mainメソッドを追加し、それぞれのコンストラクタを使用してPersonオブジェクトを作成し、それらのnameとageを出力してください。",
             "explanation": "Javaでは、初期化ブロックを使用してフィールドを初期化することができます。初期化ブロックは、コンストラクタが呼び出される前に実行されます。したがって、デフォルトコンストラクタが呼び出された場合でも、フィールドは初期化ブロックによって初期化されます。",
             "answer": "public class Person {\n\n    private String name;\n    private int age;\n\n    {\n        name = \"Unknown\";\n        age = 0;\n    }\n\n    public Person() {\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) {\n        Person person1 = new Person();\n        System.out.println(\"Name: \" + person1.name + \", Age: \" + person1.age);\n        Person person2 = new Person(\"John\", 25);\n        System.out.println(\"Name: \" + person2.name + \", Age: \" + person2.age);\n    }\n}"
         },
         {
             "id": 15,
             "questionId": "java_constructor_15",
             "title": "コンストラクタオーバーロード",
             "question": "以下のRectangleクラスについて、次のステップに従ってコードを完成させてください。\n\n1. widthとheightという名前のプライベートフィールド（整数型）を追加します。\n2. デフォルトコンストラクタを追加します。このコンストラクタは、widthとheightをそれぞれ1に設定します。\n3. 引数としてwidthとheightを受け取るコンストラクタを追加します。このコンストラクタは、引数の値をフィールドに設定します。\n\n```java\npublic class Rectangle {\n\n}\n```\n\nまた、mainメソッドを追加し、それぞれのコンストラクタを使用してRectangleオブジェクトを作成し、それらのwidthとheightを出力してください。",
             "explanation": "コンストラクタオーバーロードとは、同じ名前のコンストラクタを複数定義することです。しかし、各コンストラクタのパラメータの数や型は異なる必要があります。これにより、オブジェクトの初期化方法を柔軟に設定することができます。",
             "answer": "public class Rectangle {\n\n    private int width;\n    private int height;\n\n    public Rectangle() {\n        this.width = 1;\n        this.height = 1;\n    }\n\n    public Rectangle(int width, int height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public static void main(String[] args) {\n        Rectangle rectangle1 = new Rectangle();\n        System.out.println(\"Width: \" + rectangle1.width + \", Height: \" + rectangle1.height);\n        Rectangle rectangle2 = new Rectangle(5, 10);\n        System.out.println(\"Width: \" + rectangle2.width + \", Height: \" + rectangle2.height);\n    }\n}"
         },
         {
             "id": 16,
             "questionId": "java_constructor_16",
             "title": "コンストラクタのチェーン",
             "question": "次のステップに従ってコードを完成させてください。\n\n1. nameという名前のプライベートフィールド（文字列型）を持つAnimalクラスを作成します。\n2. デフォルトコンストラクタを追加します。このコンストラクタは、nameを'Unknown'に設定します。\n3. 引数としてnameを受け取るコンストラクタを追加します。このコンストラクタは、引数の値をフィールドに設定します。\n4. デフォルトコンストラクタから、引数付きコンストラクタを呼び出すようにします。\n\n```java\npublic class Animal {\n\n}\n```\n\nまた、mainメソッドを追加し、それぞれのコンストラクタを使用してAnimalオブジェクトを作成し、それらのnameを出力してください。",
             "explanation": "コンストラクタのチェーンとは、一つのコンストラクタが同じクラスの別のコンストラクタを呼び出すことです。これは、'this'キーワードを使用して行います。これにより、共通の初期化ロジックを一箇所に保持することができます。",
             "answer": "public class Animal {\n\n    private String name;\n\n    public Animal() {\n        this(\"Unknown\");\n    }\n\n    public Animal(String name) {\n        this.name = name;\n    }\n\n    public static void main(String[] args) {\n        Animal animal1 = new Animal();\n        System.out.println(\"Name: \" + animal1.name);\n        Animal animal2 = new Animal(\"Rex\");\n        System.out.println(\"Name: \" + animal2.name);\n    }\n}"
         },
         {
             "id": 17,
             "questionId": "java_constructor_17",
             "title": "コンストラクタのチェーン2",
             "question": "次のステップに従ってコードを完成させてください。\n\n1. `name`（文字列型）と`age`（整数型）の2つのプライベートフィールドを持つ`Person`クラスを作成します。\n2. 両方のフィールドを初期化するためのコンストラクタを作成します。\n3. デフォルトの名前（\"Unknown\"）と指定された年齢で`Person`オブジェクトを作成するためのコンストラクタを作成します。このコンストラクタは、上記で作成した別のコンストラクタを呼び出す必要があります。\n\n```java\npublic class Person {\n\n}\n```\n\nまた、mainメソッドを追加し、それぞれのコンストラクタを使用して`Person`オブジェクトを作成し、それらの`name`と`age`を出力してください。",
             "explanation": "Javaでは、一つのコンストラクタから別のコンストラクタを呼び出すことができます。これは、コンストラクタのチェーンと呼ばれ、`this`キーワードを使用します。これにより、複数のコンストラクタが共通の初期化ロジックを共有することができます。",
             "answer": "public class Person {\n\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public Person(int age) {\n        this(\"Unknown\", age);\n    }\n\n    public static void main(String[] args) {\n        Person person1 = new Person(\"John\", 30);\n        System.out.println(\"Name: \" + person1.name + \", Age: \" + person1.age);\n        Person person2 = new Person(25);\n        System.out.println(\"Name: \" + person2.name + \", Age: \" + person2.age);\n    }\n}"
         },
         {
             "id": 18,
             "questionId": "java_constructor_18",
             "title": "コンストラクタと初期化ブロック",
             "question": "次のステップに従ってコードを完成させてください。\n\n1. `name`（文字列型）と`age`（整数型）の2つのプライベートフィールドを持つ`Person`クラスを作成します。\n2. 両方のフィールドを初期化するためのコンストラクタを作成します。\n3. 初期化ブロックを使用して、`name`フィールドにデフォルト値（\"Unknown\"）を設定します。\n\n```java\npublic class Person {\n\n}\n```\n\nまた、mainメソッドを追加し、新しい`Person`オブジェクトを作成し、その`name`と`age`を出力してください。",
             "explanation": "Javaでは、初期化ブロックを使用して、コンストラクタの前に実行されるコードを指定することができます。これは、すべてのコンストラクタに共通の初期化ロジックがある場合に便利です。",
             "answer": "public class Person {\n\n    private String name;\n    private int age;\n\n    {\n        name = \"Unknown\";\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person(\"John\", 30);\n        System.out.println(\"Name: \" + person.name + \", Age: \" + person.age);\n    }\n}"
         },
         {
             "id": 19,
             "questionId": "java_constructor_19",
             "title": "コンストラクタとthisキーワード",
             "question": "次のステップに従ってコードを完成させてください。\n\n1. `name`（文字列型）と`age`（整数型）の2つのプライベートフィールドを持つ`Person`クラスを作成します。\n2. 両方のフィールドを初期化するためのコンストラクタを作成します。ここで、`this`キーワードを使用してフィールドに値を代入してください。\n\n```java\npublic class Person {\n\n}\n```\n\nまた、mainメソッドを追加し、新しい`Person`オブジェクトを作成し、その`name`と`age`を出力してください。",
             "explanation": "`this`キーワードは、クラス内部からクラス自身の現在のインスタンスにアクセスするための参照を提供します。特に、メソッドまたはコンストラクタのパラメータ名がクラスのフィールド名と同じ場合に便利です。この場合、`this`を使用してフィールドとパラメータの間で区別をつけることができます。",
             "answer": "public class Person {\n\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person(\"John\", 30);\n        System.out.println(\"Name: \" + person.name + \", Age: \" + person.age);\n    }\n}"
         },
         {
             "id": 20,
             "questionId": "java_constructor_20",
             "title": "コンストラクタオーバーロード",
             "question": "次のステップに従ってコードを完成させてください。\n\n1. `name`（文字列型）と`age`（整数型）の2つのプライベートフィールドを持つ`Person`クラスを作成します。\n2. `name`と`age`を初期化するためのコンストラクタと、`name`のみを初期化し、`age`を0に設定する別のコンストラクタを作成します。\n\n```java\npublic class Person {\n\n}\n```\n\nまた、mainメソッドを追加し、2つの異なるコンストラクタを使用して新しい`Person`オブジェクトを作成し、それぞれの`name`と`age`を出力してください。",
             "explanation": "コンストラクタオーバーロードとは、同じ名前のコンストラクタを複数作成することですが、パラメータの数やタイプは異なる必要があります。これにより、オブジェクトの初期化を異なる方法で行うことができます。",
             "answer": "public class Person {\n\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public Person(String name) {\n        this.name = name;\n        this.age = 0;\n    }\n\n    public static void main(String[] args) {\n        Person person1 = new Person(\"John\", 30);\n        System.out.println(\"Name: \" + person1.name + \", Age: \" + person1.age);\n\n        Person person2 = new Person(\"Alex\");\n        System.out.println(\"Name: \" + person2.name + \", Age: \" + person2.age);\n    }\n}\n"
         }
     ]
 }