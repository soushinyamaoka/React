{
    "contentsId": "java2",
    "title": "Javaのメソッド問題集ページ",
    "subtitle": "中級",
    "questions": [{
            "id": 1,
            "questionId": "java2_1",
            "title": "オーバーロード",
            "question": "同じ名前のメソッドを定義し、異なる引数の型や数を持つことで機能を拡張する、オーバーロードを実装してください。以下の条件に従って作成してください。\n\n条件：\n1. メソッド名は、add。\n2. 整数型の引数を2つ持つaddメソッド。\n3. 整数型の引数を3つ持つaddメソッド。\n4. double型の引数を2つ持つaddメソッド。\n5. mainメソッド内でこれらのメソッドを呼び出し、結果を出力する。",
            "explanation": "オーバーロードは、メソッドの名前は同じであるが、引数の型や数が異なることで、異なる機能を持つことができます。これにより、メソッドの名前を統一しながらも、柔軟に機能を拡張することができます。",
            "answer": "public class OverloadExample {\n\n    public static void main(String[] args) {\n        int sum1 = add(10, 20);\n        int sum2 = add(10, 20, 30);\n        double sum3 = add(10.5, 20.5);\n\n        System.out.println(\"10 + 20 = \" + sum1);\n        System.out.println(\"10 + 20 + 30 = \" + sum2);\n        System.out.println(\"10.5 + 20.5 = \" + sum3);\n    }\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int add(int a, int b, int c) {\n        return a + b + c;\n    }\n\n    public static double add(double a, double b) {\n        return a + b;\n    }\n}"
        },
        {
            "id": 2,
            "questionId": "java2_2",
            "title": "再帰メソッド",
            "question": "再帰メソッドを使用して、与えられた整数nの階乗を計算するメソッドfactorialを作成してください。mainメソッド内でfactorialメソッドを呼び出し、結果を出力してください。",
            "explanation": "再帰メソッドは、自分自身を呼び出すメソッドのことです。nの階乗を計算する際、n * (n - 1) * (n - 2) * ... * 1となりますが、これを再帰的に表現することができます。再帰の終了条件は、nが1以下の場合です。",
            "answer": "public class FactorialExample {\n\n    public static void main(String[] args) {\n        int n = 5;\n        int result = factorial(n);\n        System.out.println(n + \"! = \" + result);\n    }\n\n    public static int factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n}"
        },
        {
            "id": 3,
            "questionId": "java2_3",
            "title": "可変長引数",
            "question": "可変長引数を使用して、与えられた整数の合計を計算するメソッドsumを作成してください。mainメソッド内でsumメソッドを呼び出し、結果を出力してください。",
            "explanation": "可変長引数は、引数の数が可変であるメソッドを作成するための機能です。Javaでは、メソッドの仮引数に「型... 変数名」の形式で記述することで可変長引数を使用できます。可変長引数を使用するメソッド内では、引数は配列として扱われます。",
            "answer": "public class SumExample {\n\n    public static void main(String[] args) {\n        int sumResult = sum(1, 2, 3, 4, 5);\n        System.out.println(\"Sum: \" + sumResult);\n    }\n\n    public static int sum(int... numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n}"
        },
        {
            "id": 4,
            "questionId": "java2_4",
            "title": "メソッドオーバーロード",
            "question": "同じ名前のメソッドを引数の型や数を変えて複数定義するメソッドオーバーロードを使って、2つの整数の最大値を求めるmaxメソッドと、3つの整数の最大値を求めるmaxメソッドを作成してください。mainメソッド内で両方のメソッドを呼び出し、結果を出力してください。",
            "explanation": "メソッドオーバーロードとは、同じ名前のメソッドを引数の型や数を変えて複数定義することです。これにより、同じ処理を行うメソッドでも引数の数や型が異なる場合に、同じ名前で呼び出すことができます。",
            "answer": "public class MaxExample {\n\n    public static void main(String[] args) {\n        int max2 = max(1, 2);\n        int max3 = max(1, 2, 3);\n        System.out.println(\"Max of 2 integers: \" + max2);\n        System.out.println(\"Max of 3 integers: \" + max3);\n    }\n\n    public static int max(int num1, int num2) {\n        return Math.max(num1, num2);\n    }\n\n    public static int max(int num1, int num2, int num3) {\n        return Math.max(max(num1, num2), num3);\n    }\n}"
        },
        {
            "id": 5,
            "questionId": "java2_5",
            "title": "再帰メソッド",
            "question": "再帰を利用したメソッドを使って、与えられた正の整数nまでの総和を求めるsumメソッドを作成してください。mainメソッド内でsumメソッドを呼び出し、結果を出力してください。",
            "explanation": "再帰メソッドは、メソッドの中で自分自身を呼び出すことで、繰り返し処理を行う方法です。この問題では、引数が0になるまで自分自身を呼び出す再帰メソッドを使って総和を計算します。",
            "answer": "public class RecursiveSum {\n\n    public static void main(String[] args) {\n        int result = sum(5);\n        System.out.println(\"Sum of numbers up to 5: \" + result);\n    }\n\n    public static int sum(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        return n + sum(n - 1);\n    }\n}"
        },
        {
            "id": 6,
            "questionId": "java2_6",
            "title": "可変長引数",
            "question": "可変長引数を利用して、整数の配列を引数に取り、その配列内の全ての要素の合計値を返すメソッドsumを作成してください。mainメソッドでsumメソッドを呼び出し、結果を出力してください。",
            "explanation": "可変長引数は、引数の数が可変であるメソッドを定義するための機能です。引数の型の後ろに...をつけることで可変長引数を定義できます。この問題では、可変長引数を使って整数の配列を受け取り、その要素の合計値を返すメソッドを作成します。",
            "answer": "public class VarArgsSum {\n\n    public static void main(String[] args) {\n        int result = sum(1, 2, 3, 4, 5);\n        System.out.println(\"Sum of 1, 2, 3, 4, and 5: \" + result);\n    }\n\n    public static int sum(int... numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n}"
        },
        {
            "id": 7,
            "questionId": "java2_7",
            "title": "メソッドオーバーロード",
            "question": "同じ名前のメソッドを複数定義し、引数の型や数に応じて呼び出されるメソッドが変わる「メソッドオーバーロード」を利用してください。次の2つのメソッドを作成し、mainメソッドでそれぞれ呼び出して結果を出力してください。1つ目のメソッドは、2つの整数を引数に取り、その積を返すメソッドmultiply。2つ目のメソッドは、2つの小数（double型）を引数に取り、その積を返すメソッドmultiply。",
            "explanation": "メソッドオーバーロードは、同じ名前のメソッドを複数定義し、引数の型や数に応じて呼び出されるメソッドが変わる機能です。この問題では、整数と小数の2つの引数を受け取り、その積を返すメソッドをそれぞれ作成し、mainメソッドで呼び出して結果を出力します。",
            "answer": "public class OverloadedMultiply {\n\n    public static void main(String[] args) {\n        int intResult = multiply(2, 3);\n        double doubleResult = multiply(2.5, 3.5);\n        System.out.println(\"2 * 3 = \" + intResult);\n        System.out.println(\"2.5 * 3.5 = \" + doubleResult);\n    }\n\n    public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n}"
        },
        {
            "id": 8,
            "questionId": "java2_8",
            "title": "可変長引数",
            "question": "可変長引数を使用して、与えられた整数の合計を返すメソッドsumを作成してください。そして、mainメソッドでsumメソッドを呼び出し、結果を出力してください。",
            "explanation": "可変長引数は、メソッドの引数に任意の個数の引数を渡すことができる機能です。メソッド定義の際に、引数の型の後ろに3つのドット（...）を記述することで可変長引数として扱うことができます。この問題では、可変長引数を使用して、与えられた整数の合計を返すメソッドを作成し、mainメソッドで呼び出して結果を出力します。",
            "answer": "public class SumWithVarargs {\n\n    public static void main(String[] args) {\n        int sum1 = sum(1, 2, 3, 4, 5);\n        int sum2 = sum(10, 20, 30);\n        System.out.println(\"Sum of 1, 2, 3, 4, 5: \" + sum1);\n        System.out.println(\"Sum of 10, 20, 30: \" + sum2);\n    }\n\n    public static int sum(int... numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n}"
        },
        {
            "id": 9,
            "questionId": "java2_9",
            "title": "再帰",
            "question": "再帰を用いて、与えられた整数nの階乗を計算するメソッドfactorialを作成してください。そして、mainメソッドでfactorialメソッドを呼び出し、結果を出力してください。",
            "explanation": "再帰とは、関数やメソッドが自分自身を呼び出すことです。この問題では、再帰を用いて与えられた整数nの階乗を計算するメソッドを作成し、mainメソッドで呼び出して結果を出力します。",
            "answer": "public class FactorialWithRecursion {\n\n    public static void main(String[] args) {\n        int n = 5;\n        int result = factorial(n);\n        System.out.println(\"Factorial of \" + n + \": \" + result);\n    }\n\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n}"
        },
        {
            "id": 10,
            "questionId": "java2_10",
            "title": "ラムダ式",
            "question": "Javaのラムダ式を使用して、与えられた整数配列内の偶数のみを表示するコードを作成してください。",
            "explanation": "ラムダ式は、無名関数（名前のない関数）を記述するための簡潔な方法です。この問題では、Javaのラムダ式を使用して、与えられた整数配列内の偶数のみを表示するコードを作成します。",
            "answer": "import java.util.Arrays;\n\npublic class LambdaEvenNumbers {\n\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n        Arrays.stream(numbers)\n                .filter(n -> n % 2 == 0)\n                .forEach(System.out::println);\n    }\n}"
        },
        {
            "id": 11,
            "questionId": "java2_11",
            "title": "コンストラクタオーバーロード",
            "question": "次の2つのコンストラクタを持つクラス「Person」を作成してください：\n1. 引数なしのデフォルトコンストラクタ。\n2. 引数に「String name」と「int age」を持つコンストラクタ。\nまた、Personオブジェクトを2つ作成し、それぞれのコンストラクタを使用してオブジェクトを初期化してください。",
            "explanation": "コンストラクタオーバーロードは、異なる引数を持つ複数のコンストラクタを同じクラス内で定義することです。この問題では、引数なしのデフォルトコンストラクタと、引数に「String name」と「int age」を持つコンストラクタを持つ「Person」クラスを作成します。",
            "answer": "public class Person {\n\n    private String name;\n    private int age;\n\n    public Person() {\n        this.name = \"Unknown\";\n        this.age = 0;\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) {\n        Person person1 = new Person();\n        Person person2 = new Person(\"Alice\", 25);\n\n        System.out.println(\"Person 1: \" + person1.name + \", \" + person1.age);\n        System.out.println(\"Person 2: \" + person2.name + \", \" + person2.age);\n    }\n}"
        },
        {
            "id": 12,
            "questionId": "java2_12",
            "title": "再帰メソッド",
            "question": "再帰を使用して、与えられた整数「n」の階乗を計算するメソッド「factorial」を作成してください。\n例：factorial(5) は 120 を返します。\n注意: 再帰を使わずにループで実装しないでください。",
            "explanation": "再帰は、メソッドが自分自身を呼び出すプロセスです。この問題では、与えられた整数「n」の階乗を計算する再帰メソッド「factorial」を作成します。",
            "answer": "public class Factorial {\n\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        int result = factorial(n);\n        System.out.println(\"The factorial of \" + n + \" is: \" + result);\n    }\n}"
        },
        {
            "id": 13,
            "questionId": "java2_13",
            "title": "可変長引数",
            "question": "可変長引数を使用して、引数として渡されたすべての整数の平均を計算するメソッド「average」を作成してください。\n例：average(1, 2, 3, 4) は 2.5 を返します。",
            "explanation": "可変長引数は、0 個または複数の引数をメソッドに渡すことができる機能です。この問題では、可変長引数を使用して、渡されたすべての整数の平均を計算するメソッド「average」を作成します。",
            "answer": "public class AverageCalculator {\n\n    public static double average(int... numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return (double) sum / numbers.length;\n    }\n\n    public static void main(String[] args) {\n        double result = average(1, 2, 3, 4);\n        System.out.println(\"The average is: \" + result);\n    }\n}"
        },
        {
            "id": 14,
            "questionId": "java2_14",
            "title": "メソッドオーバーロード",
            "question": "次の条件に従って、整数の乗算と文字列の連結を行うメソッド「multiplyOrConcatenate」をメソッドオーバーロードを利用して実装してください。\n1. 2つの整数を引数に取り、それらの積を返すメソッド\n2. 2つの文字列を引数に取り、それらの連結を返すメソッド",
            "explanation": "メソッドオーバーロードは、同じ名前のメソッドを複数定義し、引数の型や数が異なることで区別する機能です。この問題では、整数の乗算と文字列の連結を行うメソッド「multiplyOrConcatenate」をメソッドオーバーロードを利用して実装します。",
            "answer": "public class OverloadExample {\n\n    public static int multiplyOrConcatenate(int a, int b) {\n        return a * b;\n    }\n\n    public static String multiplyOrConcatenate(String a, String b) {\n        return a.concat(b);\n    }\n\n    public static void main(String[] args) {\n        int multiplyResult = multiplyOrConcatenate(3, 4);\n        String concatenateResult = multiplyOrConcatenate(\"Hello\", \" World\");\n        System.out.println(\"Multiply result: \" + multiplyResult);\n        System.out.println(\"Concatenate result: \" + concatenateResult);\n    }\n}"
        },
        {
            "id": 15,
            "questionId": "java2_15",
            "title": "可変長引数",
            "question": "可変長引数を使用して、渡された複数の整数を足し合わせるメソッド「sum」を実装してください。",
            "explanation": "可変長引数は、引数の数が決まっていない場合に使用します。メソッドの仮引数の型の後に「...」を記述することで可変長引数を宣言できます。可変長引数は、配列として扱われます。",
            "answer": "public class VarArgsExample {\n\n    public static int sum(int... numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        int sumResult = sum(1, 2, 3, 4, 5);\n        System.out.println(\"Sum result: \" + sumResult);\n    }\n}"
        },
        {
            "id": 16,
            "questionId": "java2_16",
            "title": "再帰",
            "question": "再帰を使用して、与えられた整数nについて、階乗を求めるメソッド「factorial」を実装してください。",
            "explanation": "再帰とは、メソッドが自分自身を呼び出すことです。階乗は、自然数nについて、1からnまでの積を求める演算です。再帰を使用して階乗を求める方法は、基本ケース（nが0または1の場合）と再帰ケース（nが2以上の場合）に分けて考えます。",
            "answer": "public class RecursionExample {\n\n    public static int factorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int factorialResult = factorial(5);\n        System.out.println(\"Factorial result: \" + factorialResult);\n    }\n}"
        },
        {
            "id": 17,
            "questionId": "java2_17",
            "title": "オーバーロード",
            "question": "整数の配列を受け取り、その合計値を返すメソッド「sum」を実装してください。また、このメソッドをオーバーロードして、2つの整数を受け取り、その合計値を返すメソッド「sum」も実装してください。",
            "explanation": "オーバーロードとは、同じ名前のメソッドを複数定義することです。ただし、それらのメソッドは引数の型や数が異なる必要があります。今回の例では、整数の配列と2つの整数を引数に取る2つの異なるメソッドを実装します。",
            "answer": "public class OverloadExample {\n\n    public static int sum(int[] numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n\n    public static int sum(int a, int b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        System.out.println(\"Sum of array: \" + sum(numbers));\n        System.out.println(\"Sum of 4 and 7: \" + sum(4, 7));\n    }\n}"
        },
        {
            "id": 18,
            "questionId": "java2_18",
            "title": "コンストラクタオーバーロード",
            "question": "次の要件を満たすクラス「Person」を作成してください。\n1. プライベートフィールドとして、String型の「name」を持つ。\n2. プライベートフィールドとして、int型の「age」を持つ。\n3. 引数なしのコンストラクタで、nameに「Unknown」、ageに0を代入する。\n4. 引数としてnameを受け取るコンストラクタで、nameを代入し、ageに0を代入する。\n5. 引数としてnameとageを受け取るコンストラクタで、nameとageを代入する。",
            "explanation": "コンストラクタオーバーロードとは、同じ名前のコンストラクタを複数定義することです。ただし、それらのコンストラクタは引数の型や数が異なる必要があります。",
            "answer": "public class Person {\n\n    private String name;\n    private int age;\n\n    public Person() {\n        this.name = \"Unknown\";\n        this.age = 0;\n    }\n\n    public Person(String name) {\n        this.name = name;\n        this.age = 0;\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n}"
        },
        {
            "id": 19,
            "questionId": "java2_19",
            "title": "可変長引数を使用したメソッド",
            "question": "可変長引数を使用して、引数で受け取ったint型の数字の合計を返すメソッド「sum」を作成してください。",
            "explanation": "可変長引数は、引数の数が不定である場合に使用できます。Javaでは、可変長引数は「型... 引数名」という形で定義します。可変長引数はメソッド内で配列として扱われます。",
            "answer": "public class VariableArguments {\n\n    public static int sum(int... numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum(1, 2, 3, 4, 5)); // 予想される出力結果: 15\n    }\n\n}"
        },
        {
            "id": 20,
            "questionId": "java2_20",
            "title": "再帰を使用したメソッド",
            "question": "再帰を使用して、引数で受け取ったint型の数字nに対して、1からnまでの全ての数字の積（階乗）を返すメソッド「factorial」を作成してください。",
            "explanation": "再帰とは、メソッド内で自分自身のメソッドを呼び出すことです。再帰にはベースケース（終了条件）が必要で、それによって無限ループに陥ることを防ぎます。",
            "answer": "public class Recursion {\n\n    public static int factorial(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorial(5)); // 予想される出力結果: 120\n    }\n\n}"
        }
    ]
}