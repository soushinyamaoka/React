{
    "contentsId": "java2",
    "title": "Javaのオブジェクト問題集ページ",
    "subtitle": "初級",
    "questions": [{
            "id": 1,
            "questionId": "java4_1",
            "title": "初級: オブジェクトの作成",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Dogクラスを作成する\n2. Dogクラスにnameという文字列型のインスタンス変数を作成する\n3. mainメソッド内でDogクラスのオブジェクトを作成し、nameに\"Hachi\"という名前を代入する\n4. System.out.printlnを使ってオブジェクトのnameを出力する",
            "explanation": "オブジェクトは、クラスを元に作成されるインスタンスであり、プログラム内で操作されるデータのまとまりを表します。オブジェクトの作成は、クラス名とnew演算子を使って行います。",
            "answer": "class Dog {\n    String name;\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog();\n        dog.name = \"Hachi\";\n        System.out.println(dog.name);\n    }\n}\n"
        },
        {
            "id": 2,
            "questionId": "java4_2",
            "title": "初級: オブジェクトのメソッドを呼び出す",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Dogクラスを作成する\n2. Dogクラスにbarkメソッドを作成し、メソッド内で\"Woof!\"と出力する\n3. mainメソッド内でDogクラスのオブジェクトを作成し、barkメソッドを呼び出す",
            "explanation": "オブジェクトのメソッドは、そのオブジェクトに関連する振る舞いを表現します。オブジェクトのメソッドを呼び出すには、オブジェクト名.メソッド名()の形式で記述します。",
            "answer": "class Dog {\n    void bark() {\n        System.out.println(\"Woof!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog();\n        dog.bark();\n    }\n}\n"
        },
        {
            "id": 3,
            "questionId": "java4_3",
            "title": "初級: コンストラクタを使ったオブジェクトの初期化",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Dogクラスを作成する\n2. Dogクラスにnameという文字列型のインスタンス変数を作成する\n3. Dogクラスに引数として名前を受け取るコンストラクタを作成し、name変数に代入する\n4. mainメソッド内でDogクラスのオブジェクトを作成し、コンストラクタで\"Hachi\"という名前を代入する\n5. System.out.printlnを使ってオブジェクトのnameを出力する",
            "explanation": "コンストラクタは、オブジェクトが作成されるときに呼び出される特殊なメソッドで、オブジェクトの初期化を行います。コンストラクタは、クラス名と同じ名前を持ち、戻り値の型を持ちません。",
            "answer": "class Dog {\n    String name;\n\n    Dog(String dogName) {\n        name = dogName;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog(\"Hachi\");\n        System.out.println(dog.name);\n    }\n}\n"
        },
        {
            "id": 4,
            "questionId": "java4_4",
            "title": "初級: オブジェクトのメソッドを呼び出す",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Dogクラスを作成する\n2. Dogクラスにnameという文字列型のインスタンス変数を作成する\n3. Dogクラスに引数として名前を受け取るコンストラクタを作成し、name変数に代入する\n4. Dogクラスに「bark」というメソッドを作成し、System.out.printlnを使って\"[name] is barking!\"と出力する。ここで、[name]はインスタンス変数のnameの値\n5. mainメソッド内でDogクラスのオブジェクトを作成し、コンストラクタで\"Hachi\"という名前を代入する\n6. オブジェクトのbarkメソッドを呼び出す",
            "explanation": "オブジェクトのメソッドを呼び出すには、オブジェクト名.メソッド名()の形式で記述します。この問題では、Dogクラスのオブジェクトであるdogのbarkメソッドを呼び出すため、dog.bark()と記述します。",
            "answer": "class Dog {\n    String name;\n\n    Dog(String dogName) {\n        name = dogName;\n    }\n\n    void bark() {\n        System.out.println(name + \" is barking!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog(\"Hachi\");\n        dog.bark();\n    }\n}\n"
        },
        {
            "id": 5,
            "questionId": "java5_5",
            "title": "初級: オブジェクトのメソッドに引数を渡す",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Catクラスを作成する\n2. Catクラスにnameという文字列型のインスタンス変数を作成する\n3. Catクラスに引数として名前を受け取るコンストラクタを作成し、name変数に代入する\n4. Catクラスに「say」というメソッドを作成し、引数としてString型のwordを受け取る\n5. sayメソッド内で、System.out.printlnを使って\"[name] says [word]\"と出力する。ここで、[name]はインスタンス変数のnameの値、[word]は引数で受け取ったwordの値\n6. mainメソッド内でCatクラスのオブジェクトを作成し、コンストラクタで\"Tama\"という名前を代入する\n7. オブジェクトのsayメソッドを呼び出し、\"meow\"という文字列を引数として渡す",
            "explanation": "オブジェクトのメソッドに引数を渡すには、オブジェクト名.メソッド名(引数)の形式で記述します。この問題では、Catクラスのオブジェクトであるcatのsayメソッドに\"meow\"という文字列を引数として渡すため、cat.say(\"meow\")と記述します。",
            "answer": "class Cat {\n    String name;\n\n    Cat(String catName) {\n        name = catName;\n    }\n\n    void say(String word) {\n        System.out.println(name + \" says \" + word);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Cat cat = new Cat(\"Tama\");\n        cat.say(\"meow\");\n    }\n}\n"
        },
        {
            "id": 6,
            "questionId": "java6_6",
            "title": "初級: オブジェクトのメソッドから値を返す",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Circleクラスを作成する\n2. Circleクラスにradiusというdouble型のインスタンス変数を作成する\n3. Circleクラスに引数として半径を受け取るコンストラクタを作成し、radius変数に代入する\n4. Circleクラスに「getArea」というメソッドを作成し、引数はなく、戻り値としてdouble型を返す\n5. getAreaメソッド内で、面積を計算する（面積 = radius * radius * 3.14）し、結果を返す\n6. mainメソッド内でCircleクラスのオブジェクトを作成し、コンストラクタで半径5.0を代入する\n7. オブジェクトのgetAreaメソッドを呼び出し、面積をdouble型の変数に代入する\n8. System.out.printlnを使って、面積の値を出力する",
            "explanation": "オブジェクトのメソッドから値を返すには、メソッド定義時に戻り値の型を指定し、return文で値を返します。この問題では、CircleクラスのgetAreaメソッドから面積の値を返すため、double型で戻り値を指定し、return文で計算結果を返すようにします。",
            "answer": "class Circle {\n    double radius;\n\n    Circle(double circleRadius) {\n        radius = circleRadius;\n    }\n\n    double getArea() {\n        return radius * radius * 3.14;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Circle circle = new Circle(5.0);\n        double area = circle.getArea();\n        System.out.println(\"Area of the circle: \" + area);\n    }\n}\n"
          },
          {
            "id": 7,
            "questionId": "java6_7",
            "title": "初級: オブジェクトのメソッドに引数を渡す",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Rectangleクラスを作成する\n2. Rectangleクラスにwidthとheightというdouble型のインスタンス変数を作成する\n3. Rectangleクラスに引数として幅と高さを受け取るコンストラクタを作成し、widthおよびheight変数に代入する\n4. Rectangleクラスに「scale」というメソッドを作成し、引数としてdouble型の倍率を受け取り、戻り値はなし\n5. scaleメソッド内で、widthおよびheightを引数で受け取った倍率でスケーリングする\n6. mainメソッド内でRectangleクラスのオブジェクトを作成し、コンストラクタで幅10.0、高さ5.0を代入する\n7. オブジェクトのscaleメソッドを呼び出し、倍率2.0を渡す\n8. System.out.printlnを使って、スケーリング後の幅と高さの値を出力する",
            "explanation": "オブジェクトのメソッドに引数を渡すには、メソッド定義時に引数の型と変数名を指定します。この問題では、Rectangleクラスのscaleメソッドに引数として倍率を渡すため、double型で引数を指定し、メソッド内でwidthおよびheightをスケーリングするようにします。",
            "answer": "class Rectangle {\n    double width;\n    double height;\n\n    Rectangle(double w, double h) {\n        width = w;\n        height = h;\n    }\n\n    void scale(double factor) {\n        width *= factor;\n        height *= factor;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Rectangle rectangle = new Rectangle(10.0, 5.0);\n        rectangle.scale(2.0);\n        System.out.println(\"Scaled width: \" + rectangle.width);\n        System.out.println(\"Scaled height: \" + rectangle.height);\n    }\n}\n"
          },
          {
            "id": 8,
            "questionId": "java6_8",
            "title": "初級: オブジェクトのメソッドから値を返す",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Circleクラスを作成する\n2. Circleクラスにradiusというdouble型のインスタンス変数を作成する\n3. Circleクラスに引数として半径を受け取るコンストラクタを作成し、radius変数に代入する\n4. Circleクラスに「area」というメソッドを作成し、引数はなく、戻り値はdouble型\n5. areaメソッド内で、円の面積を計算し、戻り値として返す(円周率はMath.PIを使用)\n6. mainメソッド内でCircleクラスのオブジェクトを作成し、コンストラクタで半径5.0を代入する\n7. オブジェクトのareaメソッドを呼び出し、その戻り値をdouble型の変数に格納する\n8. System.out.printlnを使って、円の面積を出力する",
            "explanation": "オブジェクトのメソッドから値を返すには、メソッド定義時に戻り値の型を指定します。この問題では、Circleクラスのareaメソッドから戻り値としてdouble型の値を返すようにします。メソッド内で円の面積を計算し、戻り値として返すことで、mainメソッド内でその値を利用することができます。",
            "answer": "class Circle {\n    double radius;\n\n    Circle(double r) {\n        radius = r;\n    }\n\n    double area() {\n        return Math.PI * radius * radius;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Circle circle = new Circle(5.0);\n        double area = circle.area();\n        System.out.println(\"Circle area: \" + area);\n    }\n}\n"
          },
          {
            "id": 9,
            "questionId": "java6_9",
            "title": "初級: オブジェクト同士の比較",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Studentクラスを作成する\n2. StudentクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Studentクラスに引数として名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. Studentクラスに「isOlder」というメソッドを作成し、引数としてStudentオブジェクトを受け取り、戻り値はboolean型\n5. isOlderメソッド内で、引数で受け取ったStudentオブジェクトのageと、自分自身のageを比較し、自分自身の方が年齢が高ければtrueを返す\n6. mainメソッド内でStudentクラスのオブジェクトを2つ作成し、それぞれのコンストラクタで名前と年齢を代入する\n7. 一つ目のオブジェクトのisOlderメソッドを呼び出し、引数として二つ目のオブジェクトを渡す\n8. 戻り値がtrueの場合は、「[名前] is older than [名前]」と表示し、falseの場合は、「[名前] is not older than [名前]」と表示する",
            "explanation": "オブジェクト同士の比較を行う際には、メソッド内で引数として受け取ったオブジェクトと、自分自身のオブジェクトのプロパティを比較します。この問題では、isOlderメソッド内で自分自身のageと引数で受け取ったStudentオブジェクトのageを比較して、結果に応じてboolean値を返すように実装します。",
            "answer": "class Student {\n    String name;\n    int age;\n\n    Student(String n, int a) {\n        name = n;\n        age = a;\n    }\n\n    boolean isOlder(Student other) {\n        return this.age > other.age;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student1 = new Student(\"Alice\", 25);\n        Student student2 = new Student(\"Bob\", 22);\n\n        if (student1.isOlder(student2)) {\n            System.out.println(student1.name + \" is older than \" + student2.name);\n        } else {\n            System.out.println(student1.name + \" is not older than \" + student2.name);\n }\n }\n}\n```"
          },
          {
            "id": 10,
            "questionId": "java6_10",
            "title": "初級: オブジェクトの配列",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Personクラスを作成する\n2. PersonクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Personクラスに引数として名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. mainメソッド内でPersonクラスのオブジェクトを5つ格納できる配列を作成する\n5. 配列に5つのPersonオブジェクトを格納する\n6. 配列内のPersonオブジェクトを年齢の降順でソートする\n7. ソート後の配列をイテレートし、各Personオブジェクトの名前と年齢を表示する",
            "explanation": "オブジェクトの配列を作成し、配列内の要素をソートする方法を学びます。この問題では、Personクラスのオブジェクトを格納する配列を作成し、年齢の降順でソートして表示します。Arrays.sort()メソッドとComparatorを使用してカスタムソートを実装できます。",
            "answer": "import java.util.Arrays;\nimport java.util.Comparator;\n\nclass Person {\n    String name;\n    int age;\n\n    Person(String n, int a) {\n        name = n;\n        age = a;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person[] people = new Person[5];\n        people[0] = new Person(\"Alice\", 30);\n        people[1] = new Person(\"Bob\", 25);\n        people[2] = new Person(\"Charlie\", 28);\n        people[3] = new Person(\"David\", 22);\n        people[4] = new Person(\"Eva\", 35);\n\n        Arrays.sort(people, new Comparator<Person>() {\n            public int compare(Person p1, Person p2) {\n                return p2.age - p1.age;\n            }\n        });\n\n        for (Person person : people) {\n            System.out.println(person.name + \": \" + person.age);\n        }\n    }\n}\n"
          },
          {
            "id": 11,
            "questionId": "java7_11",
            "title": "初級: オブジェクトのクローン",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Personクラスを作成し、Cloneableインタフェースを実装する\n2. PersonクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Personクラスに引数として名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. Personクラスにcloneメソッドをオーバーライドし、Personオブジェクトのクローンを作成する\n5. mainメソッド内でPersonクラスのオブジェクトを作成し、そのオブジェクトをクローンして新しいオブジェクトを生成する\n6. クローンしたオブジェクトのnameとageを表示する",
            "explanation": "この問題では、Cloneableインタフェースを実装し、オブジェクトのクローンを作成する方法を学びます。clone()メソッドをオーバーライドして、オブジェクトの複製を作成できます。",
            "answer": "class Person implements Cloneable {\n    String name;\n    int age;\n\n    Person(String n, int a) {\n        name = n;\n        age = a;\n    }\n\n    @Override\n    public Person clone() {\n        try {\n            return (Person) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new AssertionError();\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person original = new Person(\"Alice\", 30);\n        Person cloned = original.clone();\n\n        System.out.println(\"Cloned person: \" + cloned.name + \", \" + cloned.age);\n    }\n}\n"
          },
          {
            "id": 12,
            "questionId": "java7_12",
            "title": "初級: オブジェクトのtoStringメソッド",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Personクラスを作成する\n2. PersonクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Personクラスに引数として名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. PersonクラスにtoStringメソッドをオーバーライドし、オブジェクトの情報を表す文字列を返す\n5. mainメソッド内でPersonクラスのオブジェクトを作成し、そのオブジェクトのtoStringメソッドを呼び出して結果を表示する",
            "explanation": "この問題では、オブジェクトの情報を表す文字列を返すために、toStringメソッドをオーバーライドする方法を学びます。",
            "answer": "class Person {\n    String name;\n    int age;\n\n    Person(String n, int a) {\n        name = n;\n        age = a;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{name=\" + name + \", age=\" + age + \"}\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person person = new Person(\"Alice\", 30);\n        System.out.println(person.toString());\n    }\n}\n"
          },
          {
            "id": 13,
            "questionId": "java7_13",
            "title": "初級: オブジェクトのクローン",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Personクラスを作成する\n2. PersonクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Personクラスに引数として名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. Personクラスにcloneメソッドを実装し、オブジェクトのコピーを作成する\n5. mainメソッド内でPersonクラスのオブジェクトを作成し、そのオブジェクトのcloneメソッドを呼び出してコピーを作成し、コピー元とコピー先の情報を表示する",
            "explanation": "この問題では、オブジェクトのコピーを作成するために、cloneメソッドを実装する方法を学びます。",
            "answer": "class Person implements Cloneable {\n    String name;\n    int age;\n\n    Person(String n, int a) {\n        name = n;\n        age = a;\n    }\n\n    @Override\n    protected Person clone() {\n        try {\n            return (Person) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new AssertionError(\"Cloning not supported\");\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{name=\" + name + \", age=\" + age + \"}\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person original = new Person(\"Alice\", 30);\n        Person cloned = original.clone();\n        System.out.println(\"Original: \" + original);\n        System.out.println(\"Cloned: \" + cloned);\n    }\n}\n"
          },
          {
            "id": 14,
            "questionId": "java7_14",
            "title": "初級: オブジェクトの等価性判定",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Carクラスを作成する\n2. CarクラスにmakeというString型のインスタンス変数とmodelというString型のインスタンス変数を作成する\n3. Carクラスに引数としてメーカー名と車種名を受け取るコンストラクタを作成し、makeとmodel変数に代入する\n4. Carクラスにequalsメソッドをオーバーライドして、2つのオブジェクトのmakeとmodelが等しい場合、trueを返すようにする\n5. mainメソッド内でCarクラスのオブジェクトを2つ作成し、それらの等価性を判定する",
            "explanation": "この問題では、オブジェクトの等価性判定を行うために、equalsメソッドをオーバーライドする方法を学びます。",
            "answer": "class Car {\n    String make;\n    String model;\n\n    Car(String m, String mo) {\n        make = m;\n        model = mo;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        Car car = (Car) obj;\n        return make.equals(car.make) && model.equals(car.model);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car car1 = new Car(\"Toyota\", \"Camry\");\n        Car car2 = new Car(\"Toyota\", \"Camry\");\n\n        if (car1.equals(car2)) {\n            System.out.println(\"car1 and car2 are equal\");\n        } else {\n            System.out.println(\"car1 and car2 are not equal\");\n        }\n    }\n}\n"
          },
          {
            "id": 15,
            "questionId": "java7_15",
            "title": "初級: オブジェクトのクローン",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Dogクラスを作成する\n2. DogクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Dogクラスに引数として犬の名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. DogクラスでCloneableインターフェースを実装する\n5. Dogクラスにcloneメソッドをオーバーライドして、オブジェクトのクローンを作成する\n6. mainメソッド内でDogクラスのオブジェクトを1つ作成し、そのオブジェクトのクローンを作成して、クローンの名前と年齢を出力する",
            "explanation": "この問題では、オブジェクトのクローンを作成する方法を学びます。Cloneableインターフェースを実装し、cloneメソッドをオーバーライドすることで、オブジェクトのクローンを作成できます。",
            "answer": "class Dog implements Cloneable {\n    String name;\n    int age;\n\n    Dog(String n, int a) {\n        name = n;\n        age = a;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog1 = new Dog(\"Buddy\", 3);\n        try {\n            Dog dog2 = (Dog) dog1.clone();\n            System.out.println(\"The cloned dog's name is: \" + dog2.name);\n            System.out.println(\"The cloned dog's age is: \" + dog2.age);\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"
          },
          {
            "id": 16,
            "questionId": "java7_16",
            "title": "初級: オブジェクトの比較",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Catクラスを作成する\n2. CatクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Catクラスに引数として猫の名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. Catクラスでequalsメソッドをオーバーライドして、名前と年齢が一致する場合にtrueを返すようにする\n5. mainメソッド内で2つのCatクラスのオブジェクトを作成し、equalsメソッドを使って比較した結果を出力する",
            "explanation": "この問題では、オブジェクトの比較方法を学びます。equalsメソッドをオーバーライドして、オブジェクトのインスタンス変数を比較することができます。",
            "answer": "class Cat {\n    String name;\n    int age;\n\n    Cat(String n, int a) {\n        name = n;\n        age = a;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Cat) {\n            Cat otherCat = (Cat) obj;\n            return this.name.equals(otherCat.name) && this.age == otherCat.age;\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Cat cat1 = new Cat(\"Kitty\", 2);\n        Cat cat2 = new Cat(\"Kitty\", 2);\n\n        System.out.println(\"Are the two cats equal? \" + cat1.equals(cat2));\n    }\n}\n"
          },
          {
            "id": 17,
            "questionId": "java7_17",
            "title": "初級: オブジェクトのコピー",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Dogクラスを作成する\n2. DogクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Dogクラスに引数として犬の名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. Dogクラスにコピーコンストラクタを作成する\n5. mainメソッド内で1つのDogクラスのオブジェクトを作成し、コピーコンストラクタを使って新しいオブジェクトを作成する\n6. 2つのオブジェクトの名前と年齢を出力する",
            "explanation": "この問題では、オブジェクトのコピー方法を学びます。コピーコンストラクタを使って、オブジェクトのインスタンス変数の値をコピーすることができます。",
            "answer": "class Dog {\n    String name;\n    int age;\n\n    Dog(String n, int a) {\n        name = n;\n        age = a;\n    }\n\n    Dog(Dog original) {\n        this.name = original.name;\n        this.age = original.age;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog1 = new Dog(\"Buddy\", 3);\n        Dog dog2 = new Dog(dog1);\n\n        System.out.println(\"Dog1: \" + dog1.name + \", \" + dog1.age + \" years old\");\n        System.out.println(\"Dog2: \" + dog2.name + \", \" + dog2.age + \" years old\");\n    }\n}\n"
          },
          {
            "id": 18,
            "questionId": "java7_18",
            "title": "初級: オブジェクトのnullチェック",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Catクラスを作成する\n2. CatクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Catクラスに引数として猫の名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. mainメソッド内で1つのCatクラスのオブジェクトを作成し、もう1つのオブジェクトをnullにする\n5. 2つのオブジェクトがnullでないことを確認して、名前と年齢を出力する",
            "explanation": "この問題では、オブジェクトがnullでないことを確認する方法を学びます。nullチェックを行うことで、NullPointerExceptionを回避することができます。",
            "answer": "class Cat {\n    String name;\n    int age;\n\n    Cat(String n, int a) {\n        name = n;\n        age = a;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Cat cat1 = new Cat(\"Mittens\", 2);\n        Cat cat2 = null;\n\n        if (cat1 != null) {\n            System.out.println(\"Cat1: \" + cat1.name + \", \" + cat1.age + \" years old\");\n        }\n\n        if (cat2 != null) {\n            System.out.println(\"Cat2: \" + cat2.name + \", \" + cat2.age + \" years old\");\n        }\n    }\n}\n"
          },
          {
            "id": 19,
            "questionId": "java7_19",
            "title": "初級: オブジェクトの比較",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Dogクラスを作成する\n2. DogクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Dogクラスに引数として犬の名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. Dogクラスにequalsメソッドをオーバーライドし、同じ名前と年齢の場合にtrueを返すようにする\n5. mainメソッド内で2つのDogクラスのオブジェクトを作成し、equalsメソッドで比較して結果を出力する",
            "explanation": "この問題では、オブジェクトの比較を行う方法を学びます。equalsメソッドをオーバーライドすることで、オブジェクト同士の比較を行うことができます。",
            "answer": "class Dog {\n    String name;\n    int age;\n\n    Dog(String n, int a) {\n        name = n;\n        age = a;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Dog) {\n            Dog other = (Dog) obj;\n            return this.name.equals(other.name) && this.age == other.age;\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog1 = new Dog(\"Buddy\", 3);\n        Dog dog2 = new Dog(\"Buddy\", 3);\n\n        System.out.println(\"Are dog1 and dog2 equal? \" + dog1.equals(dog2));\n    }\n}\n"
          },
          {
            "id": 20,
            "questionId": "java7_20",
            "title": "初級: オブジェクトのクローン",
            "question": "次の要件を満たすプログラムを作成してください。\n\n1. Dogクラスを作成する\n2. DogクラスにnameというString型のインスタンス変数とageというint型のインスタンス変数を作成する\n3. Dogクラスに引数として犬の名前と年齢を受け取るコンストラクタを作成し、nameとage変数に代入する\n4. DogクラスはCloneableインターフェースを実装する\n5. Dogクラスにcloneメソッドをオーバーライドし、nameとageの値が同じ新しいDogオブジェクトを返すようにする\n6. mainメソッド内でDogクラスのオブジェクトを作成し、cloneメソッドでクローンを作成し、結果を出力する",
            "explanation": "この問題では、オブジェクトのクローンを作成する方法を学びます。Cloneableインターフェースを実装し、cloneメソッドをオーバーライドすることで、オブジェクトのクローンを作成することができます。",
            "answer": "class Dog implements Cloneable {\n    String name;\n    int age;\n\n    Dog(String n, int a) {\n        name = n;\n        age = a;\n    }\n\n    @Override\n    protected Dog clone() throws CloneNotSupportedException {\n        return (Dog) super.clone();\n    }\n\n    @Override\n    public String toString() {\n        return \"Dog{name='\" + name + \"', age=\" + age + \"}\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog1 = new Dog(\"Buddy\", 3);\n        try {\n            Dog dog2 = dog1.clone();\n            System.out.println(\"Original dog: \" + dog1);\n            System.out.println(\"Cloned dog: \" + dog2);\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"
          }                                                                                                                      
    ]
}