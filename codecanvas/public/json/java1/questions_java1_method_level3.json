{
    "contentsId": "java2",
    "title": "Javaのメソッド問題集ページ",
    "subtitle": "上級",
    "questions": [{
            "id": 1,
            "questionId": "java2_1",
            "title": "オーバーロード",
            "question": "オーバーロードされたメソッドを持つクラスを作成してください。 作成したクラスは、int型とdouble型の引数を持つaddメソッドを2つ持ち、それぞれの引数の合計を返すように実装してください。",
            "explanation": "オーバーロードとは、同じ名前のメソッドを引数の型や個数を変えて複数定義することです。この問題では、addメソッドを2つオーバーロードしています。",
            "answer": "public class OverloadExample {\n\n    public int add(int a, int b) {\n        return a + b;\n    }\n\n    public double add(double a, double b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        OverloadExample oe = new OverloadExample();\n        System.out.println(\"int型のadd: \" + oe.add(1, 2)); // int型のadd: 3\n        System.out.println(\"double型のadd: \" + oe.add(1.5, 2.5)); // double型のadd: 4.0\n    }\n}"
        },
        {
            "id": 2,
            "questionId": "java2_2",
            "title": "可変長引数",
            "question": "可変長引数を使用して、任意の数のint型引数の合計を計算し返すメソッドを作成してください。",
            "explanation": "可変長引数を使用することで、任意の数の引数を渡すことができます。可変長引数は、メソッドの仮引数に「型... 変数名」という形で宣言します。",
            "answer": "public class VarargsExample {\n\n    public int sum(int... numbers) {\n        int total = 0;\n        for (int num : numbers) {\n            total += num;\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        VarargsExample ve = new VarargsExample();\n        System.out.println(ve.sum(1, 2, 3, 4, 5)); // 15\n    }\n}"
        },
        {
            "id": 3,
            "questionId": "java2_3",
            "title": "再帰メソッド",
            "question": "再帰を使用して、引数で与えられた正の整数の階乗を計算するメソッドを作成してください。",
            "explanation": "再帰とは、メソッドの中で自分自身を呼び出すことです。この問題では、階乗を計算するメソッドを再帰を使って実装しています。",
            "answer": "public class RecursiveFactorial {\n\n    public int factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        RecursiveFactorial rf = new RecursiveFactorial();\n        System.out.println(\"5の階乗: \" + rf.factorial(5)); // 5の階乗: 120\n    }\n}"
        },
        {
            "id": 4,
            "questionId": "java2_4",
            "title": "ラムダ式",
            "question": "整数型のListを引数として、それを二乗して返すラムダ式を作成して、各要素を二乗したListを出力してください。",
            "explanation": "ラムダ式は、メソッドをシンプルな記法で記述できる機能です。ラムダ式を使用することで、コードがシンプルで読みやすくなります。",
            "answer": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class LambdaExample {\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n\n        // ラムダ式を使用して、リストの各要素を二乗する\n        List<Integer> squaredNumbers = numbers.stream().map(n -> n * n).collect(Collectors.toList());\n\n        System.out.println(\"二乗後のリスト: \" + squaredNumbers); // 二乗後のリスト: [1, 4, 9]\n    }\n}"
        },
        {
            "id": 5,
            "questionId": "java2_5",
            "title": "オーバーロード",
            "question": "同じ名前のメソッドを複数定義するオーバーロードを利用し、以下の機能を持つクラスを作成してください。\n\n1. 整数値を引数に取り、その二乗を返すメソッド\n2. 浮動小数点数を引数に取り、その二乗を返すメソッド",
            "explanation": "オーバーロードは、同じ名前のメソッドを複数定義することで、引数の型や数に応じて適切なメソッドが呼び出される機能です。オーバーロードを利用することで、同じ機能を持つメソッドが複数ある場合でも、コードの見通しが良くなります。",
            "answer": "public class OverloadExample {\n\n    // 整数値を引数に取る二乗メソッド\n    public static int square(int num) {\n        return num * num;\n    }\n\n    // 浮動小数点数を引数に取る二乗メソッド\n    public static double square(double num) {\n        return num * num;\n    }\n\n    public static void main(String[] args) {\n        int intValue = 4;\n        double doubleValue = 4.0;\n\n        // オーバーロードされたメソッドを呼び出す\n        System.out.println(\"整数値の二乗: \" + square(intValue)); // 整数値の二乗: 16\n        System.out.println(\"浮動小数点数の二乗: \" + square(doubleValue)); // 浮動小数点数の二乗: 16.0\n    }\n}"
        },
        {
            "id": 6,
            "questionId": "java2_6",
            "title": "可変長引数",
            "question": "可変長引数を利用して、任意の個数の整数を引数として受け取り、それらの合計を返すメソッドを作成してください。",
            "explanation": "可変長引数は、メソッドに任意の個数の引数を渡すことができる機能です。引数の型に「...」をつけることで、可変長引数として定義できます。可変長引数は配列として扱われます。",
            "answer": "public class VariableArgumentsExample {\n\n    // 可変長引数を受け取り、合計を返すメソッド\n    public static int sum(int... nums) {\n        int total = 0;\n        for (int num : nums) {\n            total += num;\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"合計: \" + sum(1, 2, 3, 4, 5)); // 合計: 15\n        System.out.println(\"合計: \" + sum(10, 20, 30, 40)); // 合計: 100\n    }\n}"
        },
        {
            "id": 7,
            "questionId": "java2_7",
            "title": "ラムダ式",
            "question": "与えられた整数のリストに対し、偶数のみを抽出する処理をラムダ式を使用したStream APIで実装してください。\n\nリスト: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
            "explanation": "ラムダ式は、匿名関数を簡潔に表現するための機能です。Stream APIは、Java 8で導入された、コレクションの要素を効率的に操作できるAPIです。",
            "answer": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class LambdaStreamExample {\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n        // ラムダ式を使用して偶数のみを抽出\n        List<Integer> evenNumbers = numbers.stream()\n            .filter(n -> n % 2 == 0)\n            .collect(Collectors.toList());\n\n        System.out.println(\"偶数リスト: \" + evenNumbers); // 偶数リスト: [2, 4, 6, 8, 10]\n    }\n}"
        },
        {
            "id": 8,
            "questionId": "java2_8",
            "title": "メソッド参照",
            "question": "メソッド参照を使って、文字列のリストをアルファベット順にソートする処理を実装してください。\n\nリスト: [\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\"]",
            "explanation": "メソッド参照は、Java 8で導入された機能で、ラムダ式の代わりに既存のメソッドを参照することができます。メソッド参照は、特定のインスタンスのメソッドやクラスメソッド、コンストラクタなどを参照することができます。",
            "answer": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class MethodReferenceExample {\n\n    public static void main(String[] args) {\n        List<String> fruits = Arrays.asList(\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\");\n\n        // メソッド参照を使ってアルファベット順にソート\n        List<String> sortedFruits = fruits.stream()\n            .sorted(String::compareTo)\n            .collect(Collectors.toList());\n\n        System.out.println(\"ソートされたリスト: \" + sortedFruits); // ソートされたリスト: [apple, banana, cherry, grape, orange]\n    }\n}"
        },
        {
            "id": 9,
            "questionId": "java2_9",
            "title": "可変長引数",
            "question": "可変長引数を使って、受け取った整数の総和を計算して返すメソッドsumを実装してください。\n\n例:\nsum(1, 2, 3) // 6\nsum(4, 5, 6, 7, 8) // 30",
            "explanation": "可変長引数は、Java 5から導入された機能で、メソッドが任意の数の引数を受け取ることができます。引数の型の後ろに3つのドット(...)を書くことで、可変長引数として宣言できます。",
            "answer": "public class VarargsExample {\n\n    public static void main(String[] args) {\n        System.out.println(\"1 + 2 + 3 = \" + sum(1, 2, 3)); // 1 + 2 + 3 = 6\n        System.out.println(\"4 + 5 + 6 + 7 + 8 = \" + sum(4, 5, 6, 7, 8)); // 4 + 5 + 6 + 7 + 8 = 30\n    }\n\n    public static int sum(int... numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n}"
        },
        {
            "id": 10,
            "questionId": "java2_10",
            "title": "再帰メソッド",
            "question": "再帰メソッドを使って、整数nを引数に取り、1からnまでの積（n!）を計算するメソッドfactorialを実装してください。\n\n例:\nfactorial(5) // 120\nfactorial(6) // 720",
            "explanation": "再帰メソッドは、自分自身を呼び出すメソッドのことを指します。再帰メソッドを実装する際には、基本ケースと再帰ケースを明確にすることが重要です。この問題では、基本ケースはnが1の場合で、再帰ケースはnが1より大きい場合です。",
            "answer": "public class RecursionExample {\n\n    public static void main(String[] args) {\n        System.out.println(\"5! = \" + factorial(5)); // 5! = 120\n        System.out.println(\"6! = \" + factorial(6)); // 6! = 720\n    }\n\n    public static int factorial(int n) {\n        if (n == 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}"
        },
        {
            "id": 11,
            "questionId": "java2_11",
            "title": "Stream APIを用いた処理",
            "question": "与えられた整数のリストから偶数のみを抽出し、それらを2倍した新しいリストを作成するメソッドを、Java8のStream APIを用いて実装してください。メソッド名はdoubleEvensで、List<Integer>型の引数を取り、List<Integer>型の戻り値を返します。\n\n例:\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\nList<Integer> result = doubleEvens(numbers); // [4, 8, 12]",
            "explanation": "Stream APIを使用することで、集合データの操作を効率的に行うことができます。この問題では、filterメソッドを使って偶数を抽出し、mapメソッドで各要素を2倍にしています。",
            "answer": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class StreamExample {\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\n        List<Integer> result = doubleEvens(numbers);\n        System.out.println(result); // [4, 8, 12]\n    }\n\n    public static List<Integer> doubleEvens(List<Integer> numbers) {\n        return numbers.stream()\n            .filter(n -> n % 2 == 0)\n            .map(n -> n * 2)\n            .collect(Collectors.toList());\n    }\n}"
        },
        {
            "id": 12,
            "questionId": "java2_12",
            "title": "再帰を使用したメソッド",
            "question": "再帰を使用して、指定された数値の階乗を計算するメソッドを実装してください。メソッド名はfactorialで、int型の引数を取り、int型の戻り値を返します。\n\n例:\nint result = factorial(5); // 120",
            "explanation": "再帰を使用して階乗を計算するには、nが0または1の場合に1を返し、それ以外の場合にn * factorial(n - 1)を返すことで実現できます。",
            "answer": "public class FactorialExample {\n\n    public static void main(String[] args) {\n        int result = factorial(5);\n        System.out.println(result); // 120\n    }\n\n    public static int factorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n}"
        },
        {
            "id": 13,
            "questionId": "java2_13",
            "title": "可変長引数を使用したメソッド",
            "question": "可変長引数を使用して、渡されたint型の引数の合計を計算するメソッドを実装してください。メソッド名はsumで、int型の可変長引数を取り、int型の戻り値を返します。\n\n例:\nint result = sum(1, 2, 3, 4, 5); // 15",
            "explanation": "可変長引数を使用すると、任意の数の引数を受け取ることができます。引数は配列としてアクセスでき、配列の要素をループで処理して合計値を求めることができます。",
            "answer": "public class SumExample {\n\n    public static void main(String[] args) {\n        int result = sum(1, 2, 3, 4, 5);\n        System.out.println(result); // 15\n    }\n\n    public static int sum(int... numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n}"
        },
        {
            "id": 14,
            "questionId": "java2_14",
            "title": "ラムダ式を使用した関数型インターフェース",
            "question": "Javaで関数型インターフェースを使用して、与えられた整数に1を足す処理を行うラムダ式を実装してください。\n\n例:\nFunction<Integer, Integer> addOne = ...;\nint result = addOne.apply(5); // 6",
            "explanation": "ラムダ式を使用することで、関数型インターフェースのインスタンスを簡潔に実装することができます。Java標準ライブラリのFunctionインターフェースを利用し、applyメソッドで処理を実行します。",
            "answer": "import java.util.function.Function;\n\npublic class LambdaExample {\n\n    public static void main(String[] args) {\n        Function<Integer, Integer> addOne = x -> x + 1;\n        int result = addOne.apply(5);\n        System.out.println(result); // 6\n    }\n}"
        },
        {
            "id": 15,
            "questionId": "java2_15",
            "title": "ストリームAPIの利用",
            "question": "JavaのストリームAPIを使用して、整数のリストを受け取り、各要素に3を足してから、リスト内のすべての要素を合計して返すメソッドを作成してください。\n\n例:\nList<Integer> numbers = Arrays.asList(1, 2, 3);\nint result = addThreeAndSum(numbers); // 21",
            "explanation": "ストリームAPIを使用することで、コレクションに対する操作を簡潔に記述することができます。mapメソッドを使用して各要素に3を足し、reduceメソッドでリスト内のすべての要素を合計します。",
            "answer": "import java.util.Arrays;\nimport java.util.List;\n\npublic class StreamExample {\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3);\n        int result = addThreeAndSum(numbers);\n        System.out.println(result); // 21\n    }\n\n    public static int addThreeAndSum(List<Integer> numbers) {\n        return numbers.stream().map(x -> x + 3).reduce(0, Integer::sum);\n    }\n}"
        },
        {
            "id": 16,
            "questionId": "java2_16",
            "title": "ラムダ式のComparator",
            "question": "ラムダ式を使用して、Personクラスのリストを年齢で昇順に並び替えるメソッドを作成してください。\n\nPersonクラスの定義:\nclass Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() { return name; }\n    public int getAge() { return age; }\n}",
            "explanation": "ラムダ式を使用してComparatorを実装することで、コレクションの並び替え処理を簡潔に記述することができます。年齢で昇順に並び替えるためには、Comparator.comparingIntメソッドを使用します。",
            "answer": "import java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class LambdaExample {\n\n    public static void main(String[] args) {\n        List<Person> people = new ArrayList<>();\n        people.add(new Person(\"Alice\", 30));\n        people.add(new Person(\"Bob\", 25));\n        people.add(new Person(\"Charlie\", 35));\n\n        sortByAge(people);\n\n        for (Person person : people) {\n            System.out.println(person.getName() + \": \" + person.getAge());\n        }\n    }\n\n    public static void sortByAge(List<Person> people) {\n        people.sort(Comparator.comparingInt(Person::getAge));\n    }\n\n    static class Person {\n        private String name;\n        private int age;\n\n        public Person(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n\n        public String getName() { return name; }\n        public int getAge() { return age; }\n    }\n}"
        },
        {
            "id": 17,
            "questionId": "java2_17",
            "title": "デフォルトメソッドの実装",
            "question": "インターフェースMyInterfaceにデフォルトメソッドdefaultMethodを実装し、MyInterfaceを実装するクラスMyClassでデフォルトメソッドを呼び出してください。\n\nインターフェースMyInterfaceの定義:\ninterface MyInterface {\n    void normalMethod();\n}",
            "explanation": "デフォルトメソッドを使用すると、インターフェースに新しいメソッドを追加しても、既存の実装クラスに影響を与えずに拡張することができます。デフォルトメソッドは、defaultキーワードを使用してインターフェース内で定義します。",
            "answer": "public class DefaultMethodExample {\n\n    public static void main(String[] args) {\n        MyClass obj = new MyClass();\n        obj.normalMethod();\n        obj.defaultMethod();\n    }\n\n    interface MyInterface {\n        void normalMethod();\n\n        default void defaultMethod() {\n            System.out.println(\"This is a default method.\");\n        }\n    }\n\n    static class MyClass implements MyInterface {\n        @Override\n        public void normalMethod() {\n            System.out.println(\"This is a normal method.\");\n        }\n    }\n}"
        },
        {
            "id": 18,
            "questionId": "java2_18",
            "title": "ストリームとラムダ",
            "question": "Integerのリストが与えられたとき、ストリームとラムダ式を使用して偶数の要素だけを抽出し、それらの要素を合計してください。\n\nリスト: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
            "explanation": "ストリームAPIを使用してコレクションの操作を簡素化できます。ラムダ式は、コードを簡潔に記述するための方法です。ここでは、リストの要素をフィルタリングして偶数だけを取り出し、それらの要素の合計を計算します。",
            "answer": "import java.util.Arrays;\nimport java.util.List;\n\npublic class StreamLambdaExample {\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n        int sum = numbers.stream()\n                .filter(x -> x % 2 == 0)\n                .mapToInt(Integer::intValue)\n                .sum();\n\n        System.out.println(\"Sum of even numbers: \" + sum);\n    }\n}"
        },
        {
            "id": 19,
            "questionId": "java2_19",
            "title": "メソッド参照",
            "question": "Javaのメソッド参照を使用して、与えられたリスト内の数値を2倍にして、その結果を表示するプログラムを作成してください。\n\n条件：\n1.リスト内の各数値に対して、staticメソッドdoubleIt（int）を使用して2倍にする。\n2.メソッド参照を使用して、リスト内の各数値に対してdoubleItメソッドを適用する。",
            "explanation": "メソッド参照は、Java 8で導入された機能であり、ラムダ式をより簡潔に記述できます。メソッド参照を使用して、リスト内の数値を2倍にすることができます。",
            "answer": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class DoubleListUsingMethodReference {\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n        List<Integer> doubledNumbers = numbers.stream()\n                                        .map(DoubleListUsingMethodReference::doubleIt)\n                                        .collect(Collectors.toList());\n\n        System.out.println(\"Doubled numbers: \" + doubledNumbers);\n    }\n\n    public static int doubleIt(int num) {\n        return num * 2;\n    }\n}"
        },
        {
            "id": 20,
            "questionId": "java2_20",
            "title": "ラムダ式と関数型インターフェース",
            "question": "次の条件に従って、Javaでラムダ式と関数型インターフェースを使用してリスト内の数値をフィルタリングするコードを作成してください。\n\n1.関数型インターフェースMyFilterを作成し、testメソッドを実装してください。このメソッドは整数を引数にとり、真偽値を返します。\n2.ラムダ式を使って、MyFilterインターフェースを実装し、奇数だけをフィルタリングするメソッドを作成します。\n3.リスト内の数値をフィルタリングし、フィルタリングされた数値のリストを表示します。",
            "explanation": "ラムダ式は、コードが短くなり、関数型プログラミングの概念を使用して、柔軟でシンプルなコードを記述することができます。この問題では、関数型インターフェースとラムダ式を使用して、リスト内の数値をフィルタリングします。",
            "answer": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@FunctionalInterface\ninterface MyFilter {\n    boolean test(int num);\n}\n\npublic class LambdaFilter {\n\n    public static void main(String[] args) {\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n        MyFilter oddFilter = (num) -> num % 2 != 0;\n\n        List<Integer> filteredNumbers = filterList(numbers, oddFilter);\n\n        System.out.println(\"Filtered numbers: \" + filteredNumbers);\n    }\n\n    public static List<Integer> filterList(List<Integer> list, MyFilter filter) {\n        return list.stream().filter(filter::test).collect(Collectors.toList());\n    }\n}"
        }


    ]
}