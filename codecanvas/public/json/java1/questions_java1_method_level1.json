{
    "contentsId": "java2",
    "title": "Javaのメソッド問題集ページ",
    "subtitle": "初級",
    "questions": [{
            "id": 1,
            "questionId": "java1_1",
            "title": "メソッドの作成",
            "question": "「Hello, World!」と出力するメソッド「printHelloWorld」を作成し、mainメソッドから呼び出してください。",
            "explanation": "メソッドは、特定のタスクを実行するためのコードのまとまりです。mainメソッドから他のメソッドを呼び出すことで、コードの再利用性と可読性が向上します。",
            "answer": "public class HelloWorld {\n\n    public static void printHelloWorld() {\n        System.out.println(\"Hello, World!\");\n    }\n\n    public static void main(String[] args) {\n        printHelloWorld(); // 予想される出力結果: Hello, World!\n    }\n\n}"
        },
        {
            "id": 2,
            "questionId": "java1_2",
            "title": "メソッドの引数",
            "question": "整数の引数aとbを受け取り、その合計値を出力するメソッド「printSum」を作成し、mainメソッドから呼び出してください。",
            "explanation": "メソッドの引数は、メソッドに渡される変数です。引数を使用することで、メソッドが汎用的になり、さまざまな値を処理できます。",
            "answer": "public class Sum {\n\n    public static void printSum(int a, int b) {\n        int sum = a + b;\n        System.out.println(\"Sum: \" + sum);\n    }\n\n    public static void main(String[] args) {\n        printSum(5, 3); // 予想される出力結果: Sum: 8\n    }\n\n}"
        },
        {
            "id": 3,
            "questionId": "java1_3",
            "title": "メソッドの戻り値",
            "question": "整数の引数aとbを受け取り、その合計値を返すメソッド「calculateSum」を作成し、mainメソッドで呼び出して結果を出力してください。",
            "explanation": "メソッドの戻り値は、メソッドが実行した結果を呼び出し元に返すためのものです。戻り値を利用することで、結果を変数に代入して別の処理に利用することができます。",
            "answer": "public class Sum {\n\n    public static int calculateSum(int a, int b) {\n        int sum = a + b;\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int result = calculateSum(5, 3);\n        System.out.println(\"Sum: \" + result); // 予想される出力結果: Sum: 8\n    }\n\n}"
        },
        {
            "id": 4,
            "questionId": "java1_4",
            "title": "メソッドのオーバーロード",
            "question": "整数として引数aとbを受け取り、その合計値を返すメソッド「add」を作成し、続いて、浮動小数点数として引数aとbを受け取り、その合計値を返す同名のメソッド「add」を作成してください。メソッドのオーバーロードを利用して、2つの異なる型の引数に対応するメソッドを実装します。mainメソッドで呼び出して結果を出力してください。",
            "explanation": "メソッドのオーバーロードは、同じ名前のメソッドを引数の型や個数が異なることで複数定義できる機能です。これにより、異なる型や個数の引数に対して同じ名前のメソッドで処理を行うことができます。",
            "answer": "public class Overload {\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static double add(double a, double b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        int intResult = add(5, 3);\n        System.out.println(\"Int Sum: \" + intResult); // 予想される出力結果: Int Sum: 8\n\n        double doubleResult = add(5.5, 3.3);\n        System.out.println(\"Double Sum: \" + doubleResult); // 予想される出力結果: Double Sum: 8.8\n    }\n\n}"
        },
        {
            "id": 5,
            "questionId": "java1_5",
            "title": "再帰メソッド",
            "question": "整数の引数nを受け取り、nから1までの階乗値を計算して返す再帰メソッド「factorial」を作成し、mainメソッドで呼び出して結果を出力してください。再帰メソッドとは、メソッドの中で自分自身を呼び出すことによって処理を行う方法です。",
            "explanation": "再帰メソッドは、メソッドの中で自分自身を呼び出すことで、繰り返し処理を行う方法です。再帰メソッドを適切に利用することで、繰り返し処理を行うコードを簡潔に記述することができます。",
            "answer": "public class Factorial {\n\n    public static int factorial(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int result = factorial(5);\n        System.out.println(\"Factorial: \" + result); // 予想される出力結果: Factorial: 120\n    }\n\n}"
        },
        {
            "id": 6,
            "questionId": "java1_6",
            "title": "配列を引数に取るメソッド",
            "question": "int型の配列を引数に取り、配列内の要素の合計値を返すメソッド「sumArray」を作成してください。mainメソッドで呼び出し、結果を出力してください。int型の配列「numbers」には、{1, 2, 3, 4, 5}という要素が格納されているとします。",
            "explanation": "配列を引数に取るメソッドを作成することで、配列内の要素を処理するプログラムを効率的に記述できます。この問題では、配列内の要素の合計値を返すメソッドを作成し、mainメソッドで呼び出して結果を出力します。",
            "answer": "public class SumArray {\n\n    public static int sumArray(int[] numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int result = sumArray(numbers);\n        System.out.println(\"Sum: \" + result); // 予想される出力結果: Sum: 15\n    }\n\n}"
        },
        {
            "id": 7,
            "questionId": "java1_7",
            "title": "引数の個数が可変のメソッド",
            "question": "引数の個数が可変で、int型の引数をすべて足し合わせた結果を返すメソッド「sum」を作成してください。メソッドをmainメソッド内で呼び出し、結果を出力してください。このとき、引数は3, 5, 2とします。",
            "explanation": "Javaでは、可変引数を使用することで、メソッドの引数の個数を柔軟に設定することができます。この問題では、引数の個数が可変で、int型の引数をすべて足し合わせるメソッドを作成します。",
            "answer": "public class VarArgsSum {\n\n    public static int sum(int... numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        int result = sum(3, 5, 2);\n        System.out.println(\"Sum: \" + result); // 予想される出力結果: Sum: 10\n    }\n\n}"
        },
        {
            "id": 8,
            "questionId": "java1_8",
            "title": "再帰を用いた計算",
            "question": "再帰を用いて、与えられた整数nに対して、1からnまでの数値をすべて掛け合わせる「factorial」メソッドを作成してください。メソッドをmainメソッド内で呼び出し、結果を出力してください。このとき、引数は5とします。",
            "explanation": "再帰とは、あるメソッド内で自分自身を呼び出すことです。この問題では、再帰を用いて、与えられた整数nに対して、1からnまでの数値をすべて掛け合わせる「factorial」メソッドを作成します。",
            "answer": "public class Factorial {\n\n    public static int factorial(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int result = factorial(5);\n        System.out.println(\"Factorial: \" + result); // 予想される出力結果: Factorial: 120\n    }\n\n}"
        },
        {
            "id": 9,
            "questionId": "java1_9",
            "title": "オーバーロード",
            "question": "同じ名前のメソッドを複数定義してオーバーロードを実装してください。メソッド名は「printInfo」で、次の2つのパターンでオーバーロードを実現してください。\n1. 引数が「String name」の場合、nameを出力します。\n2. 引数が「String name, int age」の場合、nameとageを出力します。\nメインメソッドでこれらのメソッドを呼び出して、結果を表示してください。",
            "explanation": "オーバーロードとは、同じ名前のメソッドを異なる引数で定義することです。この問題では、同じ名前の「printInfo」メソッドを2つの異なる引数で定義し、オーバーロードを実装します。",
            "answer": "public class OverloadExample {\n\n    public static void printInfo(String name) {\n        System.out.println(\"Name: \" + name);\n    }\n\n    public static void printInfo(String name, int age) {\n        System.out.println(\"Name: \" + name + \", Age: \" + age);\n    }\n\n    public static void main(String[] args) {\n        printInfo(\"Alice\"); // 予想される出力結果: Name: Alice\n        printInfo(\"Bob\", 25); // 予想される出力結果: Name: Bob, Age: 25\n    }\n\n}"
        },
        {
            "id": 10,
            "questionId": "java1_10",
            "title": "再帰メソッド",
            "question": "再帰メソッドを用いて、整数nの階乗を計算する「factorial」メソッドを作成してください。メインメソッドでこのメソッドを呼び出し、結果を表示してください。例えば、nが5の場合、出力結果は120になります。",
            "explanation": "再帰メソッドは、メソッドが自分自身を呼び出すことによって実行されます。この問題では、階乗を計算する再帰メソッド「factorial」を作成します。nの階乗は、n * (n - 1) * (n - 2) * ... * 1 です。",
            "answer": "public class RecursiveExample {\n\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int result = factorial(5);\n        System.out.println(\"Factorial of 5 is: \" + result); // 予想される出力結果: Factorial of 5 is: 120\n    }\n\n}"
        },
        {
            "id": 11,
            "questionId": "java1_11",
            "title": "可変長引数",
            "question": "可変長引数を使用して、複数の整数の平均を計算する「calculateAverage」メソッドを作成してください。メインメソッドでこのメソッドを呼び出し、結果を表示してください。例えば、引数に1, 2, 3, 4, 5を渡した場合、出力結果は3になります。",
            "explanation": "可変長引数は、メソッドに任意の数の引数を渡すことができる機能です。この問題では、可変長引数を使用して複数の整数の平均を計算する「calculateAverage」メソッドを作成します。",
            "answer": "public class VarArgsExample {\n\n    public static double calculateAverage(int... numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return (double) sum / numbers.length;\n    }\n\n    public static void main(String[] args) {\n        double average = calculateAverage(1, 2, 3, 4, 5);\n        System.out.println(\"The average is: \" + average); // 予想される出力結果: The average is: 3.0\n    }\n\n}"
        },
        {
            "id": 12,
            "questionId": "java1_12",
            "title": "オーバーロード",
            "question": "オーバーロードを使用して、2つの整数を受け取りその和を返すメソッド「add」を作成してください。さらに、2つのdouble型の数値を受け取りその和を返す別の「add」メソッドを作成してください。メインメソッドで両方の「add」メソッドを呼び出し、結果を表示してください。",
            "explanation": "オーバーロードとは、メソッド名は同じでも引数の型や個数が異なる複数のメソッドを作成することです。この問題では、オーバーロードを使用して整数とdouble型の数値の和を計算する「add」メソッドを作成します。",
            "answer": "public class OverloadExample {\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static double add(double a, double b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Sum of integers: \" + add(3, 4)); // 予想される出力結果: Sum of integers: 7\n        System.out.println(\"Sum of doubles: \" + add(3.5, 4.5)); // 予想される出力結果: Sum of doubles: 8.0\n    }\n\n}"
        },
        {
            "id": 13,
            "questionId": "java1_13",
            "title": "再帰",
            "question": "再帰を使用して、与えられた整数の階乗を計算するメソッド「factorial」を作成してください。メインメソッドで「factorial」メソッドを呼び出し、結果を表示してください。",
            "explanation": "再帰とは、メソッドが自分自身を呼び出すことです。この問題では、再帰を使用して整数の階乗を計算する「factorial」メソッドを作成します。",
            "answer": "public class RecursionExample {\n\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Factorial of 5: \" + factorial(5)); // 予想される出力結果: Factorial of 5: 120\n    }\n\n}"
        },
        {
            "id": 14,
            "questionId": "java1_14",
            "title": "オーバーロード",
            "question": "同じ名前のメソッドを複数定義する方法である、オーバーロードを使用して、整数および浮動小数点数の2つの値を加算するaddメソッドを作成してください。メインメソッドで両方のaddメソッドを呼び出し、結果を表示してください。",
            "explanation": "オーバーロードとは、同じ名前のメソッドを異なる引数の組み合わせで複数定義することです。この問題では、オーバーロードを使用して、整数および浮動小数点数の2つの値を加算するaddメソッドを作成します。",
            "answer": "public class OverloadExample {\n\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static double add(double a, double b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Integers addition: \" + add(5, 6)); // 予想される出力結果: Integers addition: 11\n        System.out.println(\"Doubles addition: \" + add(5.0, 6.5)); // 予想される出力結果: Doubles addition: 11.5\n    }\n\n}"
        },
        {
            "id": 15,
            "questionId": "java1_15",
            "title": "再帰メソッド",
            "question": "再帰メソッドを使用して、指定された整数までの和を計算するsumメソッドを作成してください。メインメソッドでsumメソッドを呼び出し、結果を表示してください。",
            "explanation": "再帰メソッドとは、メソッドの中で自分自身を呼び出すメソッドのことです。この問題では、再帰メソッドを使用して、指定された整数までの和を計算するsumメソッドを作成します。",
            "answer": "public class RecursiveSum {\n\n    public static int sum(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return n + sum(n - 1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Sum up to 5: \" + sum(5)); // 予想される出力結果: Sum up to 5: 15\n    }\n\n}"
        },
        {
            "id": 16,
            "questionId": "java1_16",
            "title": "可変長引数",
            "question": "可変長引数を使用して、与えられた整数の合計を計算するsumメソッドを作成してください。メインメソッドでsumメソッドを呼び出し、結果を表示してください。",
            "explanation": "可変長引数とは、メソッドの引数の数が可変であることを示します。この問題では、可変長引数を使用して、与えられた整数の合計を計算するsumメソッドを作成します。",
            "answer": "public class VarArgsSum {\n\n    public static int sum(int... numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Sum: \" + sum(1, 2, 3, 4, 5)); // 予想される出力結果: Sum: 15\n    }\n\n}"
        },
        {
            "id": 17,
            "questionId": "java1_17",
            "title": "メソッドのオーバーロード",
            "question": "同じ名前のメソッドを異なる引数で定義することをメソッドのオーバーロードと言います。次の条件に従って、整数の二乗および実数の二乗を計算するsquareメソッドをオーバーロードしてください。\n\n1. 引数がint型の場合、整数の二乗を返す\n2. 引数がdouble型の場合、実数の二乗を返す\n\nメインメソッドでsquareメソッドを呼び出し、結果を表示してください。",
            "explanation": "メソッドのオーバーロードとは、同じ名前のメソッドを異なる引数で定義することです。この問題では、整数の二乗および実数の二乗を計算するsquareメソッドをオーバーロードします。",
            "answer": "public class OverloadedSquare {\n\n    public static int square(int num) {\n        return num * num;\n    }\n\n    public static double square(double num) {\n        return num * num;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Square of 4: \" + square(4)); // 予想される出力結果: Square of 4: 16\n        System.out.println(\"Square of 4.5: \" + square(4.5)); // 予想される出力結果: Square of 4.5: 20.25\n    }\n\n}"
        },
        {
            "id": 18,
            "questionId": "java1_18",
            "title": "メソッドを呼び出す",
            "question": "次の条件に従って、総和を計算するsumメソッドを作成し、メインメソッドから呼び出してください。\n\n1. 引数はint型の配列である\n2. 配列内のすべての要素の総和を返す\n\nメインメソッドでsumメソッドを呼び出し、結果を表示してください。",
            "explanation": "この問題では、総和を計算するsumメソッドを作成し、メインメソッドから呼び出します。",
            "answer": "public class ArraySum {\n\n    public static int sum(int[] numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        System.out.println(\"Sum of the array elements: \" + sum(numbers)); // 予想される出力結果: Sum of the array elements: 15\n    }\n\n}"
        },
        {
            "id": 19,
            "questionId": "java1_19",
            "title": "文字列の長さを返すメソッド",
            "question": "次の条件に従って、文字列の長さを返すメソッドを作成してください。\n\n1. メソッド名はlengthOfString\n2. 引数はString型\n3. 文字列の長さをint型で返す\n\nメインメソッドでlengthOfStringメソッドを呼び出し、結果を表示してください。",
            "explanation": "この問題では、文字列の長さを返すlengthOfStringメソッドを作成し、メインメソッドから呼び出します。",
            "answer": "public class StringLength {\n\n    public static int lengthOfString(String str) {\n        return str.length();\n    }\n\n    public static void main(String[] args) {\n        String input = \"Hello, World!\";\n        System.out.println(\"Length of the string '\" + input + \"': \" + lengthOfString(input)); // 予想される出力結果: Length of the string 'Hello, World!': 13\n    }\n\n}"
        },
        {
            "id": 20,
            "questionId": "java1_20",
            "title": "配列の合計値を返すメソッド",
            "question": "次の条件に従って、整数型配列の合計値を返すメソッドを作成してください。\n\n1. メソッド名はsumOfArray\n2. 引数はint[]型\n3. 配列の合計値をint型で返す\n\nメインメソッドでsumOfArrayメソッドを呼び出し、結果を表示してください。",
            "explanation": "この問題では、整数型配列の合計値を返すsumOfArrayメソッドを作成し、メインメソッドから呼び出します。",
            "answer": "public class ArraySum {\n\n    public static int sumOfArray(int[] numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5};\n        System.out.println(\"Sum of the array: \" + sumOfArray(array)); // 予想される出力結果: Sum of the array: 15\n    }\n\n}"
        }
    ]
}