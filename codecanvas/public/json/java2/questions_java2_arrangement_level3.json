{
    "contentsId": "java5",
    "title": "Javaの基本ライブラリ、配列問題集ページ",
    "subtitle": "上級",
    "questions": [{
            "id": 1,
            "questionId": "java5_1",
            "title": "二次元配列の作成",
            "question": "Javaで二次元配列を作成し、初期化する方法を説明してください。",
            "explanation": "Javaでは、配列の配列として二次元配列を表現します。各配列は、それぞれ異なる長さを持つことができます。",
            "answer": "int[][] twoDimensionalArray = new int[3][3];\nfor (int i = 0; i < twoDimensionalArray.length; i++) {\n    for (int j = 0; j < twoDimensionalArray[i].length; j++) {\n        twoDimensionalArray[i][j] = i + j;\n        System.out.println(twoDimensionalArray[i][j]);\n    }\n}\n// Expected output:\n// 0\n// 1\n// 2\n// 1\n// 2\n// 3\n// 2\n// 3\n// 4"
        },
        {
            "id": 2,
            "questionId": "java5_2",
            "title": "配列のコピー",
            "question": "JavaのArraysクラスのcopyOfメソッドを使って、配列のコピーを作成する方法を説明してください。",
            "explanation": "Javaでは、ArraysクラスのcopyOfメソッドを使って配列をコピーします。このメソッドは、元の配列と同じ長さの新しい配列を作成し、元の配列のすべての要素を新しい配列にコピーします。",
            "answer": "int[] original = {1, 2, 3, 4, 5};\nint[] copied = Arrays.copyOf(original, original.length);\nfor (int number : copied) {\n    System.out.println(number);\n}\n// Expected output: 1, 2, 3, 4, 5"
        },
        {
            "id": 3,
            "questionId": "java5_3",
            "title": "配列のソート",
            "question": "JavaのArraysクラスのsortメソッドを使って、配列をソートする方法を説明してください。",
            "explanation": "JavaのArraysクラスのsortメソッドは、配列を昇順にソートします。このメソッドを使用すると、配列内の要素を自然の順序に従ってソートすることができます。",
            "answer": "int[] numbers = {5, 4, 3, 2, 1};\nArrays.sort(numbers);\nfor (int number : numbers) {\n    System.out.println(number);\n}\n// Expected output: 1, 2, 3, 4, 5"
        },
        {
            "id": 4,
            "questionId": "java5_4",
            "title": "配列要素の検索",
            "question": "JavaのArraysクラスのbinarySearchメソッドを使って、ソートされた配列から特定の要素を検索する方法を説明してください。",
            "explanation": "JavaのArraysクラスのbinarySearchメソッドは、ソートされた配列から特定の要素を検索します。このメソッドを使用する前に、配列がソートされていることを確認する必要があります。",
            "answer": "int[] numbers = {1, 2, 3, 4, 5};\nint index = Arrays.binarySearch(numbers, 3);\nSystem.out.println(index);\n// Expected output: 2"
        },
        {
            "id": 5,
            "questionId": "java5_5",
            "title": "配列のコピー",
            "question": "JavaのArraysクラスのcopyOfメソッドを使って、配列をコピーする方法を説明してください。",
            "explanation": "JavaのArraysクラスのcopyOfメソッドは、指定された長さまでの配列のコピーを作成します。新しい配列の長さが元の配列よりも長い場合、残りの要素は0になります。",
            "answer": "int[] original = {1, 2, 3, 4, 5};\nint[] copied = Arrays.copyOf(original, original.length);\nfor (int number : copied) {\n    System.out.println(number);\n}\n// Expected output: 1, 2, 3, 4, 5"
        },
        {
            "id": 6,
            "questionId": "java5_6",
            "title": "配列の比較",
            "question": "JavaのArraysクラスのequalsメソッドを使って、2つの配列が等しいかどうかを比較する方法を説明してください。",
            "explanation": "JavaのArraysクラスのequalsメソッドは、2つの配列が等しいかどうかを比較します。配列は、長さと対応する要素がすべて等しい場合にのみ等しいと見なされます。",
            "answer": "int[] array1 = {1, 2, 3, 4, 5};\nint[] array2 = {1, 2, 3, 4, 5};\nboolean isEqual = Arrays.equals(array1, array2);\nSystem.out.println(isEqual);\n// Expected output: true"
        },
        {
            "id": 7,
            "questionId": "java5_7",
            "title": "配列をリストに変換",
            "question": "JavaのArraysクラスのasListメソッドを使って、配列をリストに変換する方法を説明してください。",
            "explanation": "JavaのArraysクラスのasListメソッドを使用すると、配列をリストに変換することができます。この方法は、配列とリスト間で変換する必要がある場合に非常に便利です。",
            "answer": "String[] array = {\"Java\", \"Python\", \"C++\"};\nList<String> list = Arrays.asList(array);\nfor (String language : list) {\n    System.out.println(language);\n}\n// Expected output: Java, Python, C++"
        },
        {
            "id": 8,
            "questionId": "java5_8",
            "title": "配列のソート",
            "question": "JavaのArraysクラスのsortメソッドを使って、配列をソートする方法を説明してください。",
            "explanation": "JavaのArraysクラスのsortメソッドを使用すると、配列の要素を自然な順序にソートすることができます。この方法は、数値または文字列の配列をソートするのに非常に便利です。",
            "answer": "int[] array = {5, 3, 1, 4, 2};\nArrays.sort(array);\nfor (int number : array) {\n    System.out.println(number);\n}\n// Expected output: 1, 2, 3, 4, 5"
        },
        {
            "id": 9,
            "questionId": "java5_9",
            "title": "配列の深いコピー",
            "question": "Javaで配列の深いコピーを作成する方法を説明してください。",
            "explanation": "Javaでは、ArraysクラスのcopyOfまたはcloneメソッドを使用して配列のコピーを作成できます。しかし、これらのメソッドは浅いコピーを作成します。配列の要素自体が参照型の場合、これらのメソッドは要素の参照をコピーします。そのため、深いコピーを作成するには、配列の各要素を新たに作成する必要があります。",
            "answer": "int[][] original = {{1, 2, 3}, {4, 5, 6}};\nint[][] copy = new int[original.length][];\nfor (int i = 0; i < original.length; i++) {\n    copy[i] = Arrays.copyOf(original[i], original[i].length);\n}\n// copy is a deep copy of original"
        },
        {
            "id": 10,
            "questionId": "java5_10",
            "title": "配列のストリーム化",
            "question": "Java 8のStream APIを使用して配列をストリームに変換する方法を説明してください。",
            "explanation": "Java 8では、Stream APIを使用して配列をストリームに変換できます。これにより、配列の要素に対してmap、filter、reduceなどの関数型プログラミングの操作を行うことができます。",
            "answer": "int[] array = {1, 2, 3, 4, 5};\nIntStream stream = Arrays.stream(array);\nstream.forEach(System.out::println);\n// Expected output: 1, 2, 3, 4, 5"
        }
    ]
}