{
    "contentsId": "java3",
    "title": "Javaの文字列操作問題集ページ",
    "subtitle": "上級",
    "questions": [{
            "id": 1,
            "questionId": "java3_1",
            "title": "文字列のトークン化",
            "question": "JavaのStringTokenizerクラスを使用して文字列をトークン化する方法を教えてください。",
            "explanation": "StringTokenizerクラスは、文字列を指定したデリミタに基づいて複数のトークンに分割するために使用します。",
            "answer": "import java.util.StringTokenizer;\n\n// 文字列の定義\nString str = \"Hello, World!\";\n\n// カンマをデリミタとして文字列をトークン化\nStringTokenizer st = new StringTokenizer(str, \",\");\n\nwhile (st.hasMoreTokens()) {\n    System.out.println(st.nextToken());\n    // Expected output:\n    // Hello\n    //  World!\n}"
        },
        {
            "id": 2,
            "questionId": "java3_2",
            "title": "正規表現と文字列のマッチング",
            "question": "JavaのPatternとMatcherクラスを使用して、文字列が特定の正規表現にマッチするかどうかを判定する方法を教えてください。",
            "explanation": "PatternクラスとMatcherクラスは、正規表現と文字列のマッチングを行うために使用します。",
            "answer": "import java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\n// 正規表現の定義\nString regex = \"[a-z]+\";\n\n// チェックしたい文字列\nString str = \"hello\";\n\n// PatternとMatcherのインスタンス作成\nPattern pattern = Pattern.compile(regex);\nMatcher matcher = pattern.matcher(str);\n\n// マッチング結果の確認\nboolean isMatch = matcher.matches();\nSystem.out.println(isMatch);\n// Expected output: true"
        },
        {
            "id": 3,
            "questionId": "java3_3",
            "title": "文字列の置換",
            "question": "Javaで文字列中の特定の文字列を別の文字列に置換する方法を説明してください。",
            "explanation": "Stringクラスのreplaceメソッドを使用すると、文字列中の特定の文字列を別の文字列に置換できます。",
            "answer": "String str = \"Hello, World!\";\n\n// 'World'を'Java'に置換\nString replacedStr = str.replace(\"World\", \"Java\");\n\nSystem.out.println(replacedStr);\n// Expected output: Hello, Java!"
        },
        {
            "id": 4,
            "questionId": "java3_4",
            "title": "文字列の分割",
            "question": "Javaで文字列を特定のデリミタに基づいて分割する方法を説明してください。",
            "explanation": "Stringクラスのsplitメソッドを使用すると、特定のデリミタに基づいて文字列を分割できます。",
            "answer": "String str = \"Hello, World!\";\n\n// カンマをデリミタとして文字列を分割\nString[] parts = str.split(\",\");\n\nfor (String part : parts) {\n    System.out.println(part);\n    // Expected output:\n    // Hello\n    //  World!\n}"
        },
        {
            "id": 5,
            "questionId": "java3_5",
            "title": "文字列の結合",
            "question": "Javaで複数の文字列を結合する方法を説明してください。",
            "explanation": "Javaでは、+ 演算子またはStringBuilderクラスを使用して文字列を結合できます。しかし、大量の文字列の操作がある場合は、StringBuilderクラスを使用することが効率的です。",
            "answer": "String str1 = \"Hello\";\nString str2 = \", World!\";\n\n// +演算子を使用して文字列を結合\nString combined = str1 + str2;\nSystem.out.println(combined);\n// Expected output: Hello, World!\n\n// StringBuilderを使用して文字列を結合\nStringBuilder sb = new StringBuilder();\nsb.append(str1);\nsb.append(str2);\nString combinedWithSb = sb.toString();\nSystem.out.println(combinedWithSb);\n// Expected output: Hello, World!"
        },
        {
            "id": 6,
            "questionId": "java3_6",
            "title": "文字列の比較",
            "question": "Javaで2つの文字列を比較する方法を説明してください。",
            "explanation": "Javaでは、Stringクラスのequalsメソッドを使用して2つの文字列が等しいかどうかを確認できます。これは、== 演算子とは異なり、文字列の内容を比較します。",
            "answer": "String str1 = \"Hello\";\nString str2 = \"Hello\";\nString str3 = \"World\";\n\n// str1とstr2が等しいかどうかを確認\nboolean isEqual = str1.equals(str2);\nSystem.out.println(isEqual);\n// Expected output: true\n\n// str1とstr3が等しいかどうかを確認\nboolean isNotEqual = str1.equals(str3);\nSystem.out.println(isNotEqual);\n// Expected output: false"
        },
        {
            "id": 7,
            "questionId": "java3_7",
            "title": "文字列の分割",
            "question": "Javaで文字列を分割する方法を説明してください。",
            "explanation": "Javaでは、Stringクラスのsplitメソッドを使用して文字列を分割できます。このメソッドは、指定した正規表現に基づいて文字列を分割します。",
            "answer": "String str = \"Hello, World!\";\n\n// カンマとスペース(, )を基に文字列を分割\nString[] splitted = str.split(\", \");\n\n// 分割結果の表示\nfor (String s : splitted) {\n    System.out.println(s);\n}\n// Expected output:\n// Hello\n// World!"
        },
        {
            "id": 8,
            "questionId": "java3_8",
            "title": "文字列の置換",
            "question": "Javaで文字列内の特定の文字列を別の文字列に置換する方法を説明してください。",
            "explanation": "Javaでは、Stringクラスのreplaceメソッドを使用して文字列内の特定の文字列を別の文字列に置換できます。",
            "answer": "String str = \"Hello, World!\";\n\n// 'World'を'Java'に置換\nString replaced = str.replace(\"World\", \"Java\");\nSystem.out.println(replaced);\n// Expected output: Hello, Java!"
        },
        {
            "id": 9,
            "questionId": "java3_9",
            "title": "文字列の逆転",
            "question": "Javaで文字列を逆順にする方法を説明してください。",
            "explanation": "Javaでは、StringBuilderクラスのreverseメソッドを使用して文字列を逆順にすることができます。このメソッドは、文字列の順序を反転させます。",
            "answer": "String str = \"Hello, World!\";\n\n// StringBuilderで文字列を逆転\nString reversed = new StringBuilder(str).reverse().toString();\n\nSystem.out.println(reversed);\n// Expected output: !dlroW ,olleH"
        },
        {
            "id": 10,
            "questionId": "java3_10",
            "title": "文字列のフォーマット",
            "question": "Javaで文字列をフォーマットする方法を説明してください。",
            "explanation": "Javaでは、Stringクラスのformatメソッドを使用して文字列をフォーマットすることができます。このメソッドは、指定したフォーマットに従って文字列を作成します。",
            "answer": "int age = 25;\nString name = \"John\";\n\n// 文字列のフォーマット\nString formatted = String.format(\"My name is %s and I am %d years old.\", name, age);\n\nSystem.out.println(formatted);\n// Expected output: My name is John and I am 25 years old."
        }
    ]
}